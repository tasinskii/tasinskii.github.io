var cyl = `
v 0.000000 -1.000000 -1.000000
v 0.000000 1.000000 -1.000000
v 0.866025 -1.000000 -0.500000
v 0.866025 1.000000 -0.500000
v 0.866025 -1.000000 0.500000
v 0.866025 1.000000 0.500000
v 0.000000 -1.000000 1.000000
v 0.000000 1.000000 1.000000
v -0.866025 -1.000000 0.500000
v -0.866025 1.000000 0.500000
v -0.866025 -1.000000 -0.500000
v -0.866025 1.000000 -0.500000

vn 0.5000 -0.0000 -0.8660
vn 1.0000 -0.0000 -0.0000
vn 0.5000 -0.0000 0.8660
vn -0.5000 -0.0000 0.8660
vn -0.0000 1.0000 -0.0000
vn -1.0000 -0.0000 -0.0000
vn -0.5000 -0.0000 -0.8660
vn -0.0000 -1.0000 -0.0000

vt 1.000000 0.500000
vt 1.000000 1.000000
vt 0.833333 1.000000
vt 0.833333 0.500000
vt 0.666667 1.000000
vt 0.666667 0.500000
vt 0.500000 1.000000
vt 0.500000 0.500000
vt 0.333333 1.000000
vt 0.333333 0.500000
vt 0.457846 0.370000
vt 0.250000 0.490000
vt 0.042154 0.370000
vt 0.042154 0.130000
vt 0.250000 0.010000
vt 0.457846 0.130000
vt 0.166667 1.000000
vt 0.166667 0.500000
vt -0.000000 1.000000
vt -0.000000 0.500000
vt 0.750000 0.490000
vt 0.957846 0.370000
vt 0.957846 0.130000
vt 0.750000 0.010000
vt 0.542154 0.130000
vt 0.542154 0.370000



f 1/1/1 2/2/1 4/3/1 3/4/1
f 3/4/2 4/3/2 6/5/2 5/6/2
f 5/6/3 6/5/3 8/7/3 7/8/3
f 7/8/4 8/7/4 10/9/4 9/10/4
f 4/11/5 2/12/5 12/13/5 10/14/5
f 2/12/5 12/13/5 10/14/5 8/15/5
f 12/13/5 10/14/5 8/15/5 6/16/5
f 4/11/5 10/14/5 8/15/5 6/16/5
f 9/10/6 10/9/6 12/17/6 11/18/6
f 11/18/7 12/17/7 2/19/7 1/20/7
f 1/21/8 3/22/8 5/23/8 7/24/8
f 3/22/8 5/23/8 7/24/8 9/25/8
f 5/23/8 7/24/8 9/25/8 11/26/8
f 1/21/8 7/24/8 9/25/8 11/26/8
`
var sphere = `# Blender 4.2.3 LTS
# www.blender.org
mtllib timosphere.mtl
o Sphere
v 0.000000 0.831470 -0.555570
v 0.000000 0.555570 -0.831470
v 0.000000 0.195090 -0.980785
v 0.000000 0.000000 -1.000000
v 0.000000 -0.195090 -0.980785
v 0.000000 -0.555570 -0.831470
v 0.038060 0.980785 -0.191342
v 0.074658 0.923880 -0.375330
v 0.108386 0.831470 -0.544895
v 0.137950 0.707107 -0.693520
v 0.162212 0.555570 -0.815493
v 0.180240 0.382683 -0.906127
v 0.191342 0.195090 -0.961940
v 0.195090 0.000000 -0.980785
v 0.191342 -0.195090 -0.961940
v 0.180240 -0.382683 -0.906127
v 0.162212 -0.555570 -0.815493
v 0.137950 -0.707107 -0.693520
v 0.108386 -0.831470 -0.544895
v 0.074658 -0.923880 -0.375330
v 0.038060 -0.980785 -0.191342
v 0.074658 0.980785 -0.180240
v 0.146447 0.923880 -0.353553
v 0.212608 0.831470 -0.513280
v 0.270598 0.707107 -0.653281
v 0.318190 0.555570 -0.768178
v 0.353553 0.382683 -0.853553
v 0.375330 0.195090 -0.906127
v 0.382683 0.000000 -0.923879
v 0.375330 -0.195090 -0.906127
v 0.353553 -0.382683 -0.853553
v 0.318190 -0.555570 -0.768178
v 0.270598 -0.707107 -0.653281
v 0.212608 -0.831470 -0.513280
v 0.146447 -0.923880 -0.353553
v 0.074658 -0.980785 -0.180240
v 0.108386 0.980785 -0.162212
v 0.212608 0.923880 -0.318190
v 0.308658 0.831470 -0.461940
v 0.392847 0.707107 -0.587938
v 0.461940 0.555570 -0.691342
v 0.513280 0.382683 -0.768178
v 0.544895 0.195090 -0.815493
v 0.555570 0.000000 -0.831469
v 0.544895 -0.195090 -0.815493
v 0.513280 -0.382683 -0.768178
v 0.461940 -0.555570 -0.691342
v 0.392847 -0.707107 -0.587938
v 0.308658 -0.831470 -0.461940
v 0.212608 -0.923880 -0.318190
v 0.108386 -0.980785 -0.162212
v 0.137950 0.980785 -0.137950
v 0.270598 0.923880 -0.270598
v 0.392847 0.831470 -0.392847
v 0.500000 0.707107 -0.500000
v 0.587938 0.555570 -0.587938
v 0.653281 0.382683 -0.653281
v 0.693520 0.195090 -0.693520
v 0.707107 0.000000 -0.707107
v 0.693520 -0.195090 -0.693520
v 0.653281 -0.382683 -0.653281
v 0.587938 -0.555570 -0.587938
v 0.500000 -0.707107 -0.500000
v 0.392847 -0.831470 -0.392847
v 0.270598 -0.923880 -0.270598
v 0.137950 -0.980785 -0.137950
v 0.162212 0.980785 -0.108386
v 0.318190 0.923880 -0.212608
v 0.461940 0.831470 -0.308658
v 0.587938 0.707107 -0.392847
v 0.691342 0.555570 -0.461940
v 0.768178 0.382683 -0.513280
v 0.815493 0.195090 -0.544895
v 0.831470 0.000000 -0.555570
v 0.815493 -0.195090 -0.544895
v 0.768178 -0.382683 -0.513280
v 0.691342 -0.555570 -0.461940
v 0.587938 -0.707107 -0.392847
v 0.461940 -0.831470 -0.308658
v 0.318190 -0.923880 -0.212608
v 0.162212 -0.980785 -0.108386
v 0.000000 1.000000 0.000000
v 0.180240 0.980785 -0.074658
v 0.353553 0.923880 -0.146447
v 0.513280 0.831470 -0.212607
v 0.653281 0.707107 -0.270598
v 0.768178 0.555570 -0.318190
v 0.853553 0.382683 -0.353553
v 0.906127 0.195090 -0.375330
v 0.923879 0.000000 -0.382683
v 0.906127 -0.195090 -0.375330
v 0.853553 -0.382683 -0.353553
v 0.768178 -0.555570 -0.318190
v 0.653281 -0.707107 -0.270598
v 0.513280 -0.831470 -0.212607
v 0.353553 -0.923880 -0.146447
v 0.180240 -0.980785 -0.074658
v 0.191342 0.980785 -0.038060
v 0.375330 0.923880 -0.074658
v 0.544895 0.831470 -0.108386
v 0.693520 0.707107 -0.137950
v 0.815493 0.555570 -0.162212
v 0.906127 0.382683 -0.180240
v 0.961940 0.195090 -0.191342
v 0.980785 0.000000 -0.195090
v 0.961940 -0.195090 -0.191342
v 0.906127 -0.382683 -0.180240
v 0.815493 -0.555570 -0.162212
v 0.693520 -0.707107 -0.137950
v 0.544895 -0.831470 -0.108386
v 0.375330 -0.923880 -0.074658
v 0.191342 -0.980785 -0.038060
v 0.195090 0.980785 0.000000
v 0.382683 0.923880 0.000000
v 0.555570 0.831470 0.000000
v 0.707107 0.707107 -0.000000
v 0.831469 0.555570 0.000000
v 0.923879 0.382683 -0.000000
v 0.980785 0.195090 0.000000
v 1.000000 0.000000 0.000000
v 0.980785 -0.195090 0.000000
v 0.923879 -0.382683 -0.000000
v 0.831469 -0.555570 0.000000
v 0.707107 -0.707107 -0.000000
v 0.555570 -0.831470 0.000000
v 0.382683 -0.923880 0.000000
v 0.195090 -0.980785 0.000000
v 0.191342 0.980785 0.038060
v 0.375330 0.923880 0.074658
v 0.544895 0.831470 0.108386
v 0.693520 0.707107 0.137950
v 0.815493 0.555570 0.162212
v 0.906127 0.382683 0.180240
v 0.961940 0.195090 0.191342
v 0.980785 0.000000 0.195090
v 0.961940 -0.195090 0.191342
v 0.906127 -0.382683 0.180240
v 0.815493 -0.555570 0.162212
v 0.693520 -0.707107 0.137950
v 0.544895 -0.831470 0.108386
v 0.375330 -0.923880 0.074658
v 0.191342 -0.980785 0.038060
v 0.180240 0.980785 0.074658
v 0.353553 0.923880 0.146447
v 0.513280 0.831470 0.212608
v 0.653281 0.707107 0.270598
v 0.768178 0.555570 0.318190
v 0.853553 0.382683 0.353553
v 0.906127 0.195090 0.375330
v 0.923879 0.000000 0.382683
v 0.906127 -0.195090 0.375330
v 0.853553 -0.382683 0.353553
v 0.768178 -0.555570 0.318190
v 0.653281 -0.707107 0.270598
v 0.513280 -0.831470 0.212608
v 0.353553 -0.923880 0.146447
v 0.180240 -0.980785 0.074658
v 0.162212 0.980785 0.108386
v 0.318190 0.923880 0.212608
v 0.461940 0.831470 0.308658
v 0.587938 0.707107 0.392847
v 0.691341 0.555570 0.461940
v 0.768178 0.382683 0.513280
v 0.815493 0.195090 0.544895
v 0.831469 0.000000 0.555570
v 0.815493 -0.195090 0.544895
v 0.768178 -0.382683 0.513280
v 0.691341 -0.555570 0.461940
v 0.587938 -0.707107 0.392847
v 0.461940 -0.831470 0.308658
v 0.318190 -0.923880 0.212608
v 0.162212 -0.980785 0.108386
v 0.137950 0.980785 0.137950
v 0.270598 0.923880 0.270598
v 0.392847 0.831470 0.392847
v 0.500000 0.707107 0.500000
v 0.587938 0.555570 0.587938
v 0.653281 0.382683 0.653281
v 0.693520 0.195090 0.693520
v 0.707106 0.000000 0.707107
v 0.693520 -0.195090 0.693520
v 0.653281 -0.382683 0.653281
v 0.587938 -0.555570 0.587938
v 0.500000 -0.707107 0.500000
v 0.392847 -0.831470 0.392847
v 0.270598 -0.923880 0.270598
v 0.137950 -0.980785 0.137950
v 0.108386 0.980785 0.162212
v 0.212607 0.923880 0.318190
v 0.308658 0.831470 0.461940
v 0.392847 0.707107 0.587938
v 0.461940 0.555570 0.691342
v 0.513280 0.382683 0.768178
v 0.544895 0.195090 0.815493
v 0.555570 0.000000 0.831469
v 0.544895 -0.195090 0.815493
v 0.513280 -0.382683 0.768178
v 0.461940 -0.555570 0.691342
v 0.392847 -0.707107 0.587938
v 0.308658 -0.831470 0.461940
v 0.212607 -0.923880 0.318190
v 0.108386 -0.980785 0.162212
v 0.074658 0.980785 0.180240
v 0.146447 0.923880 0.353553
v 0.212607 0.831470 0.513280
v 0.270598 0.707107 0.653281
v 0.318189 0.555570 0.768178
v 0.353553 0.382683 0.853553
v 0.375330 0.195090 0.906127
v 0.382683 0.000000 0.923879
v 0.375330 -0.195090 0.906127
v 0.353553 -0.382683 0.853553
v 0.318189 -0.555570 0.768178
v 0.270598 -0.707107 0.653281
v 0.212607 -0.831470 0.513280
v 0.146447 -0.923880 0.353553
v 0.074658 -0.980785 0.180240
v 0.038060 0.980785 0.191342
v 0.074658 0.923880 0.375330
v 0.108386 0.831470 0.544895
v 0.137950 0.707107 0.693520
v 0.162212 0.555570 0.815493
v 0.180240 0.382683 0.906127
v 0.191342 0.195090 0.961939
v 0.195090 0.000000 0.980785
v 0.191342 -0.195090 0.961939
v 0.180240 -0.382683 0.906127
v 0.162212 -0.555570 0.815493
v 0.137950 -0.707107 0.693520
v 0.108386 -0.831470 0.544895
v 0.074658 -0.923880 0.375330
v 0.038060 -0.980785 0.191342
v -0.000000 0.980785 0.195090
v -0.000000 0.923880 0.382683
v -0.000000 0.831470 0.555570
v -0.000000 0.707107 0.707107
v -0.000000 0.555570 0.831469
v 0.000000 0.382683 0.923879
v -0.000000 0.195090 0.980785
v -0.000000 0.000000 0.999999
v -0.000000 -0.195090 0.980785
v 0.000000 -0.382683 0.923879
v -0.000000 -0.555570 0.831469
v -0.000000 -0.707107 0.707107
v -0.000000 -0.831470 0.555570
v -0.000000 -0.923880 0.382683
v -0.000000 -0.980785 0.195090
v -0.038060 0.980785 0.191342
v -0.074658 0.923880 0.375330
v -0.108386 0.831470 0.544895
v -0.137950 0.707107 0.693520
v -0.162212 0.555570 0.815493
v -0.180240 0.382683 0.906127
v -0.191342 0.195090 0.961939
v -0.195091 0.000000 0.980785
v -0.191342 -0.195090 0.961939
v -0.180240 -0.382683 0.906127
v -0.162212 -0.555570 0.815493
v -0.137950 -0.707107 0.693520
v -0.108386 -0.831470 0.544895
v -0.074658 -0.923880 0.375330
v -0.038060 -0.980785 0.191342
v -0.074658 0.980785 0.180240
v -0.146447 0.923880 0.353553
v -0.212608 0.831470 0.513280
v -0.270598 0.707107 0.653281
v -0.318190 0.555570 0.768177
v -0.353553 0.382683 0.853553
v -0.375330 0.195090 0.906127
v -0.382683 0.000000 0.923879
v -0.375330 -0.195090 0.906127
v -0.353553 -0.382683 0.853553
v -0.318190 -0.555570 0.768177
v -0.270598 -0.707107 0.653281
v -0.212608 -0.831470 0.513280
v -0.146447 -0.923880 0.353553
v -0.074658 -0.980785 0.180240
v -0.108386 0.980785 0.162212
v -0.212608 0.923880 0.318190
v -0.308658 0.831470 0.461939
v -0.392847 0.707107 0.587938
v -0.461940 0.555570 0.691341
v -0.513280 0.382683 0.768178
v -0.544895 0.195090 0.815493
v -0.555570 0.000000 0.831469
v -0.544895 -0.195090 0.815493
v -0.513280 -0.382683 0.768178
v -0.461940 -0.555570 0.691341
v -0.392847 -0.707107 0.587938
v -0.308658 -0.831470 0.461939
v -0.212608 -0.923880 0.318190
v -0.108386 -0.980785 0.162212
v -0.137950 0.980785 0.137950
v -0.270598 0.923880 0.270598
v -0.392847 0.831470 0.392847
v -0.500000 0.707107 0.500000
v -0.587938 0.555570 0.587937
v -0.653281 0.382683 0.653281
v -0.693520 0.195090 0.693520
v -0.707106 0.000000 0.707106
v -0.693520 -0.195090 0.693520
v -0.653281 -0.382683 0.653281
v -0.587938 -0.555570 0.587937
v -0.500000 -0.707107 0.500000
v -0.392847 -0.831470 0.392847
v -0.270598 -0.923880 0.270598
v -0.137950 -0.980785 0.137950
v 0.000000 -1.000000 0.000000
v -0.162212 0.980785 0.108386
v -0.318190 0.923880 0.212607
v -0.461940 0.831470 0.308658
v -0.587938 0.707107 0.392847
v -0.691341 0.555570 0.461939
v -0.768177 0.382683 0.513280
v -0.815493 0.195090 0.544895
v -0.831469 0.000000 0.555569
v -0.815493 -0.195090 0.544895
v -0.768177 -0.382683 0.513280
v -0.691341 -0.555570 0.461939
v -0.587938 -0.707107 0.392847
v -0.461940 -0.831470 0.308658
v -0.318190 -0.923880 0.212607
v -0.162212 -0.980785 0.108386
v -0.180240 0.980785 0.074658
v -0.353553 0.923880 0.146447
v -0.513280 0.831470 0.212607
v -0.653281 0.707107 0.270598
v -0.768177 0.555570 0.318189
v -0.853553 0.382683 0.353553
v -0.906127 0.195090 0.375330
v -0.923879 0.000000 0.382683
v -0.906127 -0.195090 0.375330
v -0.853553 -0.382683 0.353553
v -0.768177 -0.555570 0.318189
v -0.653281 -0.707107 0.270598
v -0.513280 -0.831470 0.212607
v -0.353553 -0.923880 0.146447
v -0.180240 -0.980785 0.074658
v -0.191342 0.980785 0.038060
v -0.375330 0.923880 0.074658
v -0.544895 0.831470 0.108386
v -0.693520 0.707107 0.137950
v -0.815493 0.555570 0.162211
v -0.906127 0.382683 0.180240
v -0.961939 0.195090 0.191341
v -0.980784 0.000000 0.195090
v -0.961939 -0.195090 0.191341
v -0.906127 -0.382683 0.180240
v -0.815493 -0.555570 0.162211
v -0.693520 -0.707107 0.137950
v -0.544895 -0.831470 0.108386
v -0.375330 -0.923880 0.074658
v -0.191342 -0.980785 0.038060
v -0.195090 0.980785 -0.000000
v -0.382683 0.923880 -0.000000
v -0.555570 0.831470 -0.000000
v -0.707107 0.707107 -0.000000
v -0.831469 0.555570 -0.000000
v -0.923879 0.382683 -0.000000
v -0.980785 0.195090 -0.000000
v -0.999999 0.000000 -0.000000
v -0.980785 -0.195090 -0.000000
v -0.923879 -0.382683 -0.000000
v -0.831469 -0.555570 -0.000000
v -0.707107 -0.707107 -0.000000
v -0.555570 -0.831470 -0.000000
v -0.382683 -0.923880 -0.000000
v -0.195090 -0.980785 -0.000000
v -0.191342 0.980785 -0.038060
v -0.375330 0.923880 -0.074658
v -0.544895 0.831470 -0.108386
v -0.693520 0.707107 -0.137950
v -0.815493 0.555570 -0.162212
v -0.906127 0.382683 -0.180240
v -0.961939 0.195090 -0.191342
v -0.980784 0.000000 -0.195091
v -0.961939 -0.195090 -0.191342
v -0.906127 -0.382683 -0.180240
v -0.815493 -0.555570 -0.162212
v -0.693520 -0.707107 -0.137950
v -0.544895 -0.831470 -0.108386
v -0.375330 -0.923880 -0.074658
v -0.191342 -0.980785 -0.038060
v -0.180240 0.980785 -0.074658
v -0.353553 0.923880 -0.146447
v -0.513279 0.831470 -0.212607
v -0.653281 0.707107 -0.270598
v -0.768177 0.555570 -0.318190
v -0.853553 0.382683 -0.353553
v -0.906127 0.195090 -0.375330
v -0.923878 0.000000 -0.382683
v -0.906127 -0.195090 -0.375330
v -0.853553 -0.382683 -0.353553
v -0.768177 -0.555570 -0.318190
v -0.653281 -0.707107 -0.270598
v -0.513279 -0.831470 -0.212607
v -0.353553 -0.923880 -0.146447
v -0.180240 -0.980785 -0.074658
v -0.162212 0.980785 -0.108386
v -0.318189 0.923880 -0.212607
v -0.461939 0.831470 -0.308658
v -0.587938 0.707107 -0.392847
v -0.691341 0.555570 -0.461940
v -0.768177 0.382683 -0.513280
v -0.815493 0.195090 -0.544895
v -0.831468 0.000000 -0.555570
v -0.815493 -0.195090 -0.544895
v -0.768177 -0.382683 -0.513280
v -0.691341 -0.555570 -0.461940
v -0.587938 -0.707107 -0.392847
v -0.461939 -0.831470 -0.308658
v -0.318189 -0.923880 -0.212607
v -0.162212 -0.980785 -0.108386
v -0.137950 0.980785 -0.137950
v -0.270598 0.923880 -0.270598
v -0.392847 0.831470 -0.392847
v -0.500000 0.707107 -0.500000
v -0.587937 0.555570 -0.587938
v -0.653281 0.382683 -0.653281
v -0.693519 0.195090 -0.693520
v -0.707106 0.000000 -0.707106
v -0.693519 -0.195090 -0.693520
v -0.653281 -0.382683 -0.653281
v -0.587937 -0.555570 -0.587938
v -0.500000 -0.707107 -0.500000
v -0.392847 -0.831470 -0.392847
v -0.270598 -0.923880 -0.270598
v -0.137950 -0.980785 -0.137950
v -0.108386 0.980785 -0.162212
v -0.212607 0.923880 -0.318190
v -0.308658 0.831470 -0.461939
v -0.392847 0.707107 -0.587938
v -0.461939 0.555570 -0.691341
v -0.513280 0.382683 -0.768177
v -0.544895 0.195090 -0.815493
v -0.555569 0.000000 -0.831469
v -0.544895 -0.195090 -0.815493
v -0.513280 -0.382683 -0.768177
v -0.461939 -0.555570 -0.691341
v -0.392847 -0.707107 -0.587938
v -0.308658 -0.831470 -0.461939
v -0.212607 -0.923880 -0.318190
v -0.108386 -0.980785 -0.162212
v -0.074658 0.980785 -0.180240
v -0.146446 0.923880 -0.353553
v -0.212607 0.831470 -0.513279
v -0.270598 0.707107 -0.653281
v -0.318189 0.555570 -0.768177
v -0.353553 0.382683 -0.853553
v -0.375330 0.195090 -0.906127
v -0.382683 0.000000 -0.923879
v -0.375330 -0.195090 -0.906127
v -0.353553 -0.382683 -0.853553
v -0.318189 -0.555570 -0.768177
v -0.270598 -0.707107 -0.653281
v -0.212607 -0.831470 -0.513279
v -0.146446 -0.923880 -0.353553
v -0.074658 -0.980785 -0.180240
v -0.038060 0.980785 -0.191342
v -0.074658 0.923880 -0.375330
v -0.108386 0.831470 -0.544895
v -0.137950 0.707107 -0.693520
v -0.162211 0.555570 -0.815493
v -0.180240 0.382683 -0.906127
v -0.191341 0.195090 -0.961939
v -0.195090 0.000000 -0.980784
v -0.191341 -0.195090 -0.961939
v -0.180240 -0.382683 -0.906127
v -0.162211 -0.555570 -0.815493
v -0.137950 -0.707107 -0.693520
v -0.108386 -0.831470 -0.544895
v -0.074658 -0.923880 -0.375330
v -0.038060 -0.980785 -0.191342
v 0.000000 0.980785 -0.195090
v 0.000000 0.923880 -0.382683
v 0.000000 0.707107 -0.707107
v 0.000000 0.382683 -0.923879
v 0.000000 -0.382683 -0.923879
v 0.000000 -0.707107 -0.707107
v 0.000000 -0.831470 -0.555570
v 0.000000 -0.923880 -0.382683
v 0.000000 -0.980785 -0.195090
vn 0.0464 0.8810 -0.4709
vn 0.0865 -0.4696 -0.8786
vn 0.0624 0.7715 -0.6332
vn 0.0759 -0.6326 -0.7708
vn 0.0759 0.6326 -0.7708
vn 0.0624 -0.7715 -0.6332
vn 0.0865 0.4696 -0.8786
vn 0.0464 -0.8810 -0.4709
vn 0.0938 0.2890 -0.9527
vn 0.0286 -0.9565 -0.2902
vn 0.0975 0.0975 -0.9904
vn 0.0097 0.9951 -0.0980
vn 0.0097 -0.9951 -0.0980
vn 0.0975 -0.0975 -0.9904
vn 0.0286 0.9565 -0.2902
vn 0.0938 -0.2890 -0.9527
vn 0.0846 0.9565 -0.2790
vn 0.2779 -0.2890 -0.9161
vn 0.1374 0.8810 -0.4528
vn 0.2563 -0.4696 -0.8448
vn 0.1847 0.7715 -0.6088
vn 0.2248 -0.6326 -0.7412
vn 0.2248 0.6326 -0.7412
vn 0.1847 -0.7715 -0.6088
vn 0.2563 0.4696 -0.8448
vn 0.1374 -0.8810 -0.4528
vn 0.2779 0.2890 -0.9161
vn 0.0846 -0.9565 -0.2790
vn 0.2889 0.0976 -0.9524
vn 0.0286 0.9951 -0.0942
vn 0.0286 -0.9951 -0.0942
vn 0.2889 -0.0976 -0.9524
vn 0.4162 0.4696 -0.7786
vn 0.2230 -0.8810 -0.4173
vn 0.4513 0.2890 -0.8443
vn 0.1374 -0.9565 -0.2571
vn 0.4691 0.0975 -0.8777
vn 0.0464 0.9951 -0.0869
vn 0.0464 -0.9951 -0.0869
vn 0.4691 -0.0975 -0.8777
vn 0.1374 0.9565 -0.2571
vn 0.4513 -0.2890 -0.8443
vn 0.2230 0.8810 -0.4173
vn 0.4162 -0.4696 -0.7786
vn 0.2999 0.7715 -0.5611
vn 0.3651 -0.6326 -0.6831
vn 0.3651 0.6326 -0.6831
vn 0.2999 -0.7715 -0.5611
vn 0.6073 -0.2890 -0.7400
vn 0.3002 0.8810 -0.3658
vn 0.5601 -0.4696 -0.6825
vn 0.4036 0.7715 -0.4918
vn 0.4913 -0.6326 -0.5987
vn 0.4913 0.6326 -0.5987
vn 0.4036 -0.7715 -0.4918
vn 0.5601 0.4696 -0.6825
vn 0.3002 -0.8810 -0.3658
vn 0.6073 0.2890 -0.7400
vn 0.1850 -0.9565 -0.2254
vn 0.6314 0.0975 -0.7693
vn 0.0625 0.9951 -0.0761
vn 0.0625 -0.9951 -0.0761
vn 0.6314 -0.0975 -0.7693
vn 0.1850 0.9565 -0.2254
vn 0.3658 -0.8810 -0.3002
vn 0.7400 0.2890 -0.6073
vn 0.2254 -0.9565 -0.1850
vn 0.7693 0.0975 -0.6314
vn 0.0761 0.9951 -0.0625
vn 0.0761 -0.9951 -0.0625
vn 0.7693 -0.0975 -0.6314
vn 0.2254 0.9565 -0.1850
vn 0.7400 -0.2890 -0.6073
vn 0.3658 0.8810 -0.3002
vn 0.6825 -0.4696 -0.5601
vn 0.4918 0.7715 -0.4036
vn 0.5987 -0.6326 -0.4913
vn 0.5987 0.6326 -0.4913
vn 0.4918 -0.7715 -0.4036
vn 0.6825 0.4696 -0.5601
vn 0.4173 0.8810 -0.2230
vn 0.7786 -0.4696 -0.4162
vn 0.5611 0.7715 -0.2999
vn 0.6831 -0.6326 -0.3651
vn 0.6831 0.6326 -0.3651
vn 0.5611 -0.7715 -0.2999
vn 0.7786 0.4696 -0.4162
vn 0.4173 -0.8810 -0.2230
vn 0.8443 0.2890 -0.4513
vn 0.2571 -0.9565 -0.1374
vn 0.8777 0.0975 -0.4691
vn 0.0869 0.9951 -0.0464
vn 0.0869 -0.9951 -0.0464
vn 0.8777 -0.0975 -0.4691
vn 0.2571 0.9565 -0.1374
vn 0.8443 -0.2890 -0.4513
vn 0.9161 0.2890 -0.2779
vn 0.2790 -0.9565 -0.0846
vn 0.9524 0.0975 -0.2889
vn 0.0942 0.9951 -0.0286
vn 0.0942 -0.9951 -0.0286
vn 0.9524 -0.0975 -0.2889
vn 0.2790 0.9565 -0.0846
vn 0.9161 -0.2890 -0.2779
vn 0.4528 0.8810 -0.1374
vn 0.8448 -0.4696 -0.2563
vn 0.6088 0.7715 -0.1847
vn 0.7412 -0.6326 -0.2248
vn 0.7412 0.6326 -0.2248
vn 0.6088 -0.7715 -0.1847
vn 0.8448 0.4696 -0.2563
vn 0.4528 -0.8810 -0.1374
vn 0.8786 -0.4696 -0.0865
vn 0.6332 0.7715 -0.0624
vn 0.7708 -0.6326 -0.0759
vn 0.7708 0.6326 -0.0759
vn 0.6332 -0.7715 -0.0624
vn 0.8786 0.4696 -0.0865
vn 0.4709 -0.8810 -0.0464
vn 0.9527 0.2890 -0.0938
vn 0.2902 -0.9565 -0.0286
vn 0.9904 0.0975 -0.0975
vn 0.0980 0.9951 -0.0097
vn 0.0980 -0.9951 -0.0097
vn 0.9904 -0.0975 -0.0975
vn 0.2902 0.9565 -0.0286
vn 0.9527 -0.2890 -0.0938
vn 0.4709 0.8810 -0.0464
vn 0.2902 -0.9565 0.0286
vn 0.9904 0.0975 0.0976
vn 0.0980 0.9951 0.0097
vn 0.0980 -0.9951 0.0097
vn 0.9904 -0.0975 0.0976
vn 0.2902 0.9565 0.0286
vn 0.9527 -0.2890 0.0938
vn 0.4709 0.8810 0.0464
vn 0.8786 -0.4696 0.0865
vn 0.6332 0.7715 0.0624
vn 0.7708 -0.6326 0.0759
vn 0.7708 0.6326 0.0759
vn 0.6332 -0.7715 0.0624
vn 0.8786 0.4696 0.0865
vn 0.4709 -0.8810 0.0464
vn 0.9527 0.2890 0.0938
vn 0.7412 -0.6326 0.2248
vn 0.7412 0.6326 0.2248
vn 0.6088 -0.7715 0.1847
vn 0.8448 0.4696 0.2563
vn 0.4528 -0.8810 0.1374
vn 0.9161 0.2890 0.2779
vn 0.2790 -0.9565 0.0846
vn 0.9524 0.0975 0.2889
vn 0.0942 0.9951 0.0286
vn 0.0942 -0.9951 0.0286
vn 0.9524 -0.0975 0.2889
vn 0.2790 0.9565 0.0846
vn 0.9161 -0.2890 0.2779
vn 0.4528 0.8810 0.1374
vn 0.8448 -0.4696 0.2563
vn 0.6088 0.7715 0.1847
vn 0.0869 0.9951 0.0464
vn 0.0869 -0.9951 0.0464
vn 0.8777 -0.0975 0.4691
vn 0.2571 0.9565 0.1374
vn 0.8443 -0.2890 0.4513
vn 0.4173 0.8810 0.2230
vn 0.7786 -0.4696 0.4162
vn 0.5611 0.7715 0.2999
vn 0.6831 -0.6326 0.3651
vn 0.6831 0.6326 0.3651
vn 0.5611 -0.7715 0.2999
vn 0.7786 0.4696 0.4162
vn 0.4173 -0.8810 0.2230
vn 0.8443 0.2890 0.4513
vn 0.2571 -0.9565 0.1374
vn 0.8777 0.0975 0.4691
vn 0.5987 0.6326 0.4913
vn 0.4918 -0.7715 0.4036
vn 0.6825 0.4696 0.5601
vn 0.3658 -0.8810 0.3002
vn 0.7400 0.2890 0.6073
vn 0.2254 -0.9565 0.1850
vn 0.7693 0.0975 0.6314
vn 0.0761 0.9951 0.0625
vn 0.0761 -0.9951 0.0625
vn 0.7693 -0.0975 0.6314
vn 0.2254 0.9565 0.1850
vn 0.7400 -0.2890 0.6073
vn 0.3658 0.8810 0.3002
vn 0.6825 -0.4696 0.5601
vn 0.4918 0.7715 0.4036
vn 0.5987 -0.6326 0.4913
vn 0.6314 -0.0975 0.7693
vn 0.1850 0.9565 0.2254
vn 0.6073 -0.2890 0.7400
vn 0.3002 0.8810 0.3658
vn 0.5601 -0.4696 0.6825
vn 0.4036 0.7715 0.4918
vn 0.4913 -0.6326 0.5987
vn 0.4913 0.6326 0.5987
vn 0.4036 -0.7715 0.4918
vn 0.5601 0.4696 0.6825
vn 0.3002 -0.8810 0.3658
vn 0.6073 0.2890 0.7400
vn 0.1850 -0.9565 0.2254
vn 0.6314 0.0975 0.7693
vn 0.0625 0.9951 0.0761
vn 0.0625 -0.9951 0.0761
vn 0.2999 -0.7715 0.5611
vn 0.4162 0.4696 0.7786
vn 0.2230 -0.8810 0.4173
vn 0.4513 0.2890 0.8443
vn 0.1374 -0.9565 0.2571
vn 0.4691 0.0975 0.8777
vn 0.0464 0.9951 0.0869
vn 0.0464 -0.9951 0.0869
vn 0.4691 -0.0975 0.8777
vn 0.1374 0.9565 0.2571
vn 0.4513 -0.2890 0.8443
vn 0.2230 0.8810 0.4173
vn 0.4162 -0.4696 0.7786
vn 0.2999 0.7715 0.5611
vn 0.3651 -0.6326 0.6831
vn 0.3651 0.6326 0.6831
vn 0.0846 0.9565 0.2790
vn 0.2779 -0.2890 0.9161
vn 0.1374 0.8810 0.4528
vn 0.2563 -0.4696 0.8448
vn 0.1847 0.7715 0.6088
vn 0.2248 -0.6326 0.7412
vn 0.2248 0.6326 0.7412
vn 0.1847 -0.7715 0.6088
vn 0.2563 0.4696 0.8448
vn 0.1374 -0.8810 0.4528
vn 0.2779 0.2890 0.9161
vn 0.0846 -0.9565 0.2790
vn 0.2889 0.0975 0.9524
vn 0.0286 0.9951 0.0942
vn 0.0286 -0.9951 0.0942
vn 0.2889 -0.0975 0.9524
vn 0.0865 0.4696 0.8786
vn 0.0464 -0.8810 0.4709
vn 0.0938 0.2890 0.9527
vn 0.0286 -0.9565 0.2902
vn 0.0975 0.0975 0.9904
vn 0.0097 0.9951 0.0980
vn 0.0097 -0.9951 0.0980
vn 0.0975 -0.0975 0.9904
vn 0.0286 0.9565 0.2902
vn 0.0938 -0.2890 0.9527
vn 0.0464 0.8810 0.4709
vn 0.0865 -0.4696 0.8786
vn 0.0624 0.7715 0.6332
vn 0.0759 -0.6326 0.7708
vn 0.0759 0.6326 0.7708
vn 0.0624 -0.7715 0.6332
vn -0.0938 -0.2890 0.9527
vn -0.0464 0.8810 0.4709
vn -0.0865 -0.4696 0.8786
vn -0.0624 0.7715 0.6332
vn -0.0759 -0.6326 0.7708
vn -0.0759 0.6326 0.7708
vn -0.0624 -0.7715 0.6332
vn -0.0865 0.4696 0.8786
vn -0.0464 -0.8810 0.4709
vn -0.0938 0.2890 0.9527
vn -0.0286 -0.9565 0.2902
vn -0.0976 0.0975 0.9904
vn -0.0097 0.9951 0.0980
vn -0.0097 -0.9951 0.0980
vn -0.0976 -0.0975 0.9904
vn -0.0286 0.9565 0.2902
vn -0.1374 -0.8810 0.4528
vn -0.2779 0.2890 0.9161
vn -0.0846 -0.9565 0.2790
vn -0.2889 0.0975 0.9524
vn -0.0286 0.9951 0.0942
vn -0.0286 -0.9951 0.0942
vn -0.2889 -0.0975 0.9524
vn -0.0846 0.9565 0.2790
vn -0.2779 -0.2890 0.9161
vn -0.1374 0.8810 0.4528
vn -0.2563 -0.4696 0.8448
vn -0.1847 0.7715 0.6088
vn -0.2248 -0.6326 0.7412
vn -0.2248 0.6326 0.7412
vn -0.1847 -0.7715 0.6088
vn -0.2563 0.4696 0.8448
vn -0.4162 -0.4696 0.7786
vn -0.2999 0.7715 0.5611
vn -0.3651 -0.6326 0.6831
vn -0.3651 0.6326 0.6831
vn -0.2999 -0.7715 0.5611
vn -0.4162 0.4696 0.7786
vn -0.2230 -0.8810 0.4173
vn -0.4513 0.2890 0.8443
vn -0.1374 -0.9565 0.2571
vn -0.4691 0.0975 0.8777
vn -0.0464 0.9951 0.0869
vn -0.0464 -0.9951 0.0869
vn -0.4691 -0.0975 0.8777
vn -0.1374 0.9565 0.2571
vn -0.4513 -0.2890 0.8443
vn -0.2230 0.8810 0.4173
vn -0.1850 -0.9565 0.2254
vn -0.6314 0.0975 0.7693
vn -0.0625 0.9951 0.0761
vn -0.0625 -0.9951 0.0761
vn -0.6314 -0.0975 0.7693
vn -0.1850 0.9565 0.2254
vn -0.6073 -0.2890 0.7400
vn -0.3002 0.8810 0.3658
vn -0.5601 -0.4696 0.6825
vn -0.4036 0.7715 0.4918
vn -0.4913 -0.6326 0.5987
vn -0.4913 0.6326 0.5987
vn -0.4036 -0.7715 0.4918
vn -0.5601 0.4696 0.6825
vn -0.3002 -0.8810 0.3658
vn -0.6073 0.2890 0.7400
vn -0.4918 0.7715 0.4036
vn -0.5987 -0.6326 0.4913
vn -0.5987 0.6326 0.4913
vn -0.4918 -0.7715 0.4036
vn -0.6825 0.4696 0.5601
vn -0.3658 -0.8810 0.3002
vn -0.7400 0.2890 0.6073
vn -0.2254 -0.9565 0.1850
vn -0.7693 0.0975 0.6314
vn -0.0761 0.9951 0.0625
vn -0.0761 -0.9951 0.0625
vn -0.7693 -0.0975 0.6314
vn -0.2254 0.9565 0.1850
vn -0.7400 -0.2890 0.6073
vn -0.3658 0.8810 0.3002
vn -0.6825 -0.4696 0.5601
vn -0.8777 0.0975 0.4691
vn -0.0869 0.9951 0.0464
vn -0.0869 -0.9951 0.0464
vn -0.8777 -0.0975 0.4691
vn -0.2571 0.9565 0.1374
vn -0.8443 -0.2890 0.4513
vn -0.4173 0.8810 0.2230
vn -0.7786 -0.4696 0.4162
vn -0.5611 0.7715 0.2999
vn -0.6831 -0.6326 0.3651
vn -0.6831 0.6326 0.3651
vn -0.5611 -0.7715 0.2999
vn -0.7786 0.4696 0.4162
vn -0.4173 -0.8810 0.2230
vn -0.8443 0.2890 0.4513
vn -0.2571 -0.9565 0.1374
vn -0.7412 -0.6326 0.2248
vn -0.7412 0.6326 0.2248
vn -0.6088 -0.7715 0.1847
vn -0.8448 0.4696 0.2563
vn -0.4528 -0.8810 0.1374
vn -0.9161 0.2890 0.2779
vn -0.2790 -0.9565 0.0846
vn -0.9524 0.0975 0.2889
vn -0.0942 0.9951 0.0286
vn -0.0942 -0.9951 0.0286
vn -0.9524 -0.0975 0.2889
vn -0.2790 0.9565 0.0846
vn -0.9161 -0.2890 0.2779
vn -0.4528 0.8810 0.1374
vn -0.8448 -0.4696 0.2563
vn -0.6088 0.7715 0.1847
vn -0.0980 0.9951 0.0097
vn -0.0980 -0.9951 0.0097
vn -0.9904 -0.0975 0.0975
vn -0.2902 0.9565 0.0286
vn -0.9527 -0.2890 0.0938
vn -0.4709 0.8810 0.0464
vn -0.8786 -0.4696 0.0865
vn -0.6332 0.7715 0.0624
vn -0.7708 -0.6326 0.0759
vn -0.7708 0.6326 0.0759
vn -0.6332 -0.7715 0.0624
vn -0.8786 0.4696 0.0865
vn -0.4709 -0.8810 0.0464
vn -0.9527 0.2890 0.0938
vn -0.2902 -0.9565 0.0286
vn -0.9904 0.0975 0.0975
vn -0.7708 0.6326 -0.0759
vn -0.6332 -0.7715 -0.0624
vn -0.8786 0.4696 -0.0865
vn -0.4709 -0.8810 -0.0464
vn -0.9527 0.2890 -0.0938
vn -0.2902 -0.9565 -0.0286
vn -0.9904 0.0975 -0.0976
vn -0.0980 0.9951 -0.0097
vn -0.0980 -0.9951 -0.0097
vn -0.9904 -0.0975 -0.0976
vn -0.2902 0.9565 -0.0286
vn -0.9527 -0.2890 -0.0938
vn -0.4709 0.8810 -0.0464
vn -0.8786 -0.4696 -0.0865
vn -0.6332 0.7715 -0.0624
vn -0.7708 -0.6326 -0.0759
vn -0.9524 -0.0975 -0.2889
vn -0.2790 0.9565 -0.0846
vn -0.9161 -0.2890 -0.2779
vn -0.4528 0.8810 -0.1374
vn -0.8448 -0.4696 -0.2563
vn -0.6088 0.7715 -0.1847
vn -0.7412 -0.6326 -0.2248
vn -0.7412 0.6326 -0.2248
vn -0.6088 -0.7715 -0.1847
vn -0.8448 0.4696 -0.2563
vn -0.4528 -0.8810 -0.1374
vn -0.9161 0.2890 -0.2779
vn -0.2790 -0.9565 -0.0846
vn -0.9524 0.0975 -0.2889
vn -0.0942 0.9951 -0.0286
vn -0.0942 -0.9951 -0.0286
vn -0.5611 -0.7715 -0.2999
vn -0.7786 0.4696 -0.4162
vn -0.4173 -0.8810 -0.2231
vn -0.8443 0.2890 -0.4513
vn -0.2571 -0.9565 -0.1374
vn -0.8777 0.0975 -0.4691
vn -0.0869 0.9951 -0.0464
vn -0.0869 -0.9951 -0.0464
vn -0.8777 -0.0975 -0.4691
vn -0.2571 0.9565 -0.1374
vn -0.8443 -0.2890 -0.4513
vn -0.4173 0.8810 -0.2231
vn -0.7786 -0.4696 -0.4162
vn -0.5611 0.7715 -0.2999
vn -0.6831 -0.6326 -0.3651
vn -0.6831 0.6326 -0.3651
vn -0.7400 -0.2890 -0.6073
vn -0.3658 0.8810 -0.3002
vn -0.6825 -0.4696 -0.5601
vn -0.4918 0.7715 -0.4036
vn -0.5987 -0.6326 -0.4913
vn -0.5987 0.6326 -0.4913
vn -0.4918 -0.7715 -0.4036
vn -0.6825 0.4696 -0.5601
vn -0.3658 -0.8810 -0.3002
vn -0.7400 0.2890 -0.6073
vn -0.2254 -0.9565 -0.1850
vn -0.7693 0.0975 -0.6314
vn -0.0761 0.9951 -0.0625
vn -0.0761 -0.9951 -0.0625
vn -0.7693 -0.0975 -0.6314
vn -0.2254 0.9565 -0.1850
vn -0.3002 -0.8810 -0.3658
vn -0.6073 0.2890 -0.7400
vn -0.1850 -0.9565 -0.2254
vn -0.6314 0.0975 -0.7693
vn -0.0625 0.9951 -0.0761
vn -0.0625 -0.9951 -0.0761
vn -0.6314 -0.0975 -0.7693
vn -0.1850 0.9565 -0.2254
vn -0.6073 -0.2890 -0.7400
vn -0.3002 0.8810 -0.3658
vn -0.5601 -0.4696 -0.6825
vn -0.4036 0.7715 -0.4918
vn -0.4913 -0.6326 -0.5987
vn -0.4913 0.6326 -0.5987
vn -0.4036 -0.7715 -0.4918
vn -0.5601 0.4696 -0.6825
vn -0.2230 0.8810 -0.4173
vn -0.4162 -0.4696 -0.7786
vn -0.2999 0.7715 -0.5611
vn -0.3651 -0.6326 -0.6831
vn -0.3651 0.6326 -0.6831
vn -0.2999 -0.7715 -0.5611
vn -0.4162 0.4696 -0.7786
vn -0.2230 -0.8810 -0.4173
vn -0.4513 0.2890 -0.8443
vn -0.1374 -0.9565 -0.2571
vn -0.4691 0.0975 -0.8777
vn -0.0464 0.9951 -0.0869
vn -0.0464 -0.9951 -0.0869
vn -0.4691 -0.0975 -0.8777
vn -0.1374 0.9565 -0.2571
vn -0.4513 -0.2890 -0.8443
vn -0.2779 0.2890 -0.9161
vn -0.0846 -0.9565 -0.2790
vn -0.2889 0.0975 -0.9524
vn -0.0286 0.9951 -0.0942
vn -0.0286 -0.9951 -0.0942
vn -0.2889 -0.0975 -0.9524
vn -0.0846 0.9565 -0.2790
vn -0.2779 -0.2890 -0.9161
vn -0.1374 0.8810 -0.4528
vn -0.2563 -0.4696 -0.8448
vn -0.1847 0.7715 -0.6088
vn -0.2248 -0.6326 -0.7412
vn -0.2248 0.6326 -0.7412
vn -0.1847 -0.7715 -0.6088
vn -0.2563 0.4696 -0.8448
vn -0.1374 -0.8810 -0.4528
vn -0.0865 -0.4696 -0.8786
vn -0.0624 0.7715 -0.6332
vn -0.0759 -0.6326 -0.7708
vn -0.0759 0.6326 -0.7708
vn -0.0624 -0.7715 -0.6332
vn -0.0865 0.4696 -0.8786
vn -0.0464 -0.8810 -0.4709
vn -0.0938 0.2890 -0.9527
vn -0.0286 -0.9565 -0.2902
vn -0.0976 0.0975 -0.9904
vn -0.0097 0.9951 -0.0980
vn -0.0097 -0.9951 -0.0980
vn -0.0976 -0.0975 -0.9904
vn -0.0286 0.9565 -0.2902
vn -0.0938 -0.2890 -0.9527
vn -0.0464 0.8810 -0.4709
vt 0.750000 0.812500
vt 0.750000 0.875000
vt 0.718750 0.875000
vt 0.718750 0.812500
vt 0.750000 0.312500
vt 0.750000 0.375000
vt 0.718750 0.375000
vt 0.718750 0.312500
vt 0.750000 0.750000
vt 0.718750 0.750000
vt 0.750000 0.250000
vt 0.718750 0.250000
vt 0.750000 0.687500
vt 0.718750 0.687500
vt 0.750000 0.187500
vt 0.718750 0.187500
vt 0.750000 0.625000
vt 0.718750 0.625000
vt 0.750000 0.125000
vt 0.718750 0.125000
vt 0.750000 0.562500
vt 0.718750 0.562500
vt 0.750000 0.062500
vt 0.718750 0.062500
vt 0.750000 0.500000
vt 0.718750 0.500000
vt 0.750000 0.937500
vt 0.734375 1.000000
vt 0.718750 0.937500
vt 0.734375 0.000000
vt 0.750000 0.437500
vt 0.718750 0.437500
vt 0.687500 0.937500
vt 0.687500 0.875000
vt 0.687500 0.437500
vt 0.687500 0.375000
vt 0.687500 0.812500
vt 0.687500 0.312500
vt 0.687500 0.750000
vt 0.687500 0.250000
vt 0.687500 0.687500
vt 0.687500 0.187500
vt 0.687500 0.625000
vt 0.687500 0.125000
vt 0.687500 0.562500
vt 0.687500 0.062500
vt 0.687500 0.500000
vt 0.703125 1.000000
vt 0.703125 0.000000
vt 0.656250 0.687500
vt 0.656250 0.625000
vt 0.656250 0.187500
vt 0.656250 0.125000
vt 0.656250 0.562500
vt 0.656250 0.062500
vt 0.656250 0.500000
vt 0.671875 1.000000
vt 0.656250 0.937500
vt 0.671875 0.000000
vt 0.656250 0.437500
vt 0.656250 0.875000
vt 0.656250 0.375000
vt 0.656250 0.812500
vt 0.656250 0.312500
vt 0.656250 0.750000
vt 0.656250 0.250000
vt 0.625000 0.437500
vt 0.625000 0.375000
vt 0.625000 0.875000
vt 0.625000 0.812500
vt 0.625000 0.312500
vt 0.625000 0.750000
vt 0.625000 0.250000
vt 0.625000 0.687500
vt 0.625000 0.187500
vt 0.625000 0.625000
vt 0.625000 0.125000
vt 0.625000 0.562500
vt 0.625000 0.062500
vt 0.625000 0.500000
vt 0.640625 1.000000
vt 0.625000 0.937500
vt 0.640625 0.000000
vt 0.593750 0.187500
vt 0.593750 0.125000
vt 0.593750 0.625000
vt 0.593750 0.562500
vt 0.593750 0.062500
vt 0.593750 0.500000
vt 0.609375 1.000000
vt 0.593750 0.937500
vt 0.609375 0.000000
vt 0.593750 0.437500
vt 0.593750 0.875000
vt 0.593750 0.375000
vt 0.593750 0.812500
vt 0.593750 0.312500
vt 0.593750 0.750000
vt 0.593750 0.250000
vt 0.593750 0.687500
vt 0.562500 0.875000
vt 0.562500 0.812500
vt 0.562500 0.375000
vt 0.562500 0.312500
vt 0.562500 0.750000
vt 0.562500 0.250000
vt 0.562500 0.687500
vt 0.562500 0.187500
vt 0.562500 0.625000
vt 0.562500 0.125000
vt 0.562500 0.562500
vt 0.562500 0.062500
vt 0.562500 0.500000
vt 0.578125 1.000000
vt 0.562500 0.937500
vt 0.578125 0.000000
vt 0.562500 0.437500
vt 0.531250 0.625000
vt 0.531250 0.562500
vt 0.531250 0.125000
vt 0.531250 0.062500
vt 0.531250 0.500000
vt 0.546875 1.000000
vt 0.531250 0.937500
vt 0.546875 0.000000
vt 0.531250 0.437500
vt 0.531250 0.875000
vt 0.531250 0.375000
vt 0.531250 0.812500
vt 0.531250 0.312500
vt 0.531250 0.750000
vt 0.531250 0.250000
vt 0.531250 0.687500
vt 0.531250 0.187500
vt 0.500000 0.375000
vt 0.500000 0.312500
vt 0.500000 0.812500
vt 0.500000 0.750000
vt 0.500000 0.250000
vt 0.500000 0.687500
vt 0.500000 0.187500
vt 0.500000 0.625000
vt 0.500000 0.125000
vt 0.500000 0.562500
vt 0.500000 0.062500
vt 0.500000 0.500000
vt 0.515625 1.000000
vt 0.500000 0.937500
vt 0.515625 0.000000
vt 0.500000 0.437500
vt 0.500000 0.875000
vt 0.468750 0.125000
vt 0.468750 0.062500
vt 0.468750 0.562500
vt 0.468750 0.500000
vt 0.484375 1.000000
vt 0.468750 0.937500
vt 0.484375 0.000000
vt 0.468750 0.437500
vt 0.468750 0.875000
vt 0.468750 0.375000
vt 0.468750 0.812500
vt 0.468750 0.312500
vt 0.468750 0.750000
vt 0.468750 0.250000
vt 0.468750 0.687500
vt 0.468750 0.187500
vt 0.468750 0.625000
vt 0.437500 0.312500
vt 0.437500 0.250000
vt 0.437500 0.750000
vt 0.437500 0.687500
vt 0.437500 0.187500
vt 0.437500 0.625000
vt 0.437500 0.125000
vt 0.437500 0.562500
vt 0.437500 0.062500
vt 0.437500 0.500000
vt 0.453125 1.000000
vt 0.437500 0.937500
vt 0.453125 0.000000
vt 0.437500 0.437500
vt 0.437500 0.875000
vt 0.437500 0.375000
vt 0.437500 0.812500
vt 0.421875 1.000000
vt 0.406250 0.937500
vt 0.421875 0.000000
vt 0.406250 0.062500
vt 0.406250 0.500000
vt 0.406250 0.437500
vt 0.406250 0.875000
vt 0.406250 0.375000
vt 0.406250 0.812500
vt 0.406250 0.312500
vt 0.406250 0.750000
vt 0.406250 0.250000
vt 0.406250 0.687500
vt 0.406250 0.187500
vt 0.406250 0.625000
vt 0.406250 0.125000
vt 0.406250 0.562500
vt 0.375000 0.750000
vt 0.375000 0.687500
vt 0.375000 0.250000
vt 0.375000 0.187500
vt 0.375000 0.625000
vt 0.375000 0.125000
vt 0.375000 0.562500
vt 0.375000 0.062500
vt 0.375000 0.500000
vt 0.390625 1.000000
vt 0.375000 0.937500
vt 0.390625 0.000000
vt 0.375000 0.437500
vt 0.375000 0.875000
vt 0.375000 0.375000
vt 0.375000 0.812500
vt 0.375000 0.312500
vt 0.343750 0.500000
vt 0.343750 0.437500
vt 0.343750 0.937500
vt 0.343750 0.875000
vt 0.343750 0.375000
vt 0.343750 0.812500
vt 0.343750 0.312500
vt 0.343750 0.750000
vt 0.343750 0.250000
vt 0.343750 0.687500
vt 0.343750 0.187500
vt 0.343750 0.625000
vt 0.343750 0.125000
vt 0.343750 0.562500
vt 0.343750 0.062500
vt 0.359375 1.000000
vt 0.359375 0.000000
vt 0.312500 0.250000
vt 0.312500 0.187500
vt 0.312500 0.687500
vt 0.312500 0.625000
vt 0.312500 0.125000
vt 0.312500 0.562500
vt 0.312500 0.062500
vt 0.312500 0.500000
vt 0.328125 1.000000
vt 0.312500 0.937500
vt 0.328125 0.000000
vt 0.312500 0.437500
vt 0.312500 0.875000
vt 0.312500 0.375000
vt 0.312500 0.812500
vt 0.312500 0.312500
vt 0.312500 0.750000
vt 0.281250 0.937500
vt 0.281250 0.875000
vt 0.281250 0.437500
vt 0.281250 0.375000
vt 0.281250 0.812500
vt 0.281250 0.312500
vt 0.281250 0.750000
vt 0.281250 0.250000
vt 0.281250 0.687500
vt 0.281250 0.187500
vt 0.281250 0.625000
vt 0.281250 0.125000
vt 0.281250 0.562500
vt 0.281250 0.062500
vt 0.281250 0.500000
vt 0.296875 1.000000
vt 0.296875 0.000000
vt 0.250000 0.687500
vt 0.250000 0.625000
vt 0.250000 0.187500
vt 0.250000 0.125000
vt 0.250000 0.562500
vt 0.250000 0.062500
vt 0.250000 0.500000
vt 0.265625 1.000000
vt 0.250000 0.937500
vt 0.265625 0.000000
vt 0.250000 0.437500
vt 0.250000 0.875000
vt 0.250000 0.375000
vt 0.250000 0.812500
vt 0.250000 0.312500
vt 0.250000 0.750000
vt 0.250000 0.250000
vt 0.218750 0.437500
vt 0.218750 0.375000
vt 0.218750 0.875000
vt 0.218750 0.812500
vt 0.218750 0.312500
vt 0.218750 0.750000
vt 0.218750 0.250000
vt 0.218750 0.687500
vt 0.218750 0.187500
vt 0.218750 0.625000
vt 0.218750 0.125000
vt 0.218750 0.562500
vt 0.218750 0.062500
vt 0.218750 0.500000
vt 0.234375 1.000000
vt 0.218750 0.937500
vt 0.234375 0.000000
vt 0.187500 0.187500
vt 0.187500 0.125000
vt 0.187500 0.625000
vt 0.187500 0.562500
vt 0.187500 0.062500
vt 0.187500 0.500000
vt 0.203125 1.000000
vt 0.187500 0.937500
vt 0.203125 0.000000
vt 0.187500 0.437500
vt 0.187500 0.875000
vt 0.187500 0.375000
vt 0.187500 0.812500
vt 0.187500 0.312500
vt 0.187500 0.750000
vt 0.187500 0.250000
vt 0.187500 0.687500
vt 0.156250 0.375000
vt 0.156250 0.312500
vt 0.156250 0.812500
vt 0.156250 0.750000
vt 0.156250 0.250000
vt 0.156250 0.687500
vt 0.156250 0.187500
vt 0.156250 0.625000
vt 0.156250 0.125000
vt 0.156250 0.562500
vt 0.156250 0.062500
vt 0.156250 0.500000
vt 0.171875 1.000000
vt 0.156250 0.937500
vt 0.171875 0.000000
vt 0.156250 0.437500
vt 0.156250 0.875000
vt 0.125000 0.125000
vt 0.125000 0.062500
vt 0.125000 0.562500
vt 0.125000 0.500000
vt 0.140625 1.000000
vt 0.125000 0.937500
vt 0.140625 0.000000
vt 0.125000 0.437500
vt 0.125000 0.875000
vt 0.125000 0.375000
vt 0.125000 0.812500
vt 0.125000 0.312500
vt 0.125000 0.750000
vt 0.125000 0.250000
vt 0.125000 0.687500
vt 0.125000 0.187500
vt 0.125000 0.625000
vt 0.093750 0.812500
vt 0.093750 0.750000
vt 0.093750 0.312500
vt 0.093750 0.250000
vt 0.093750 0.687500
vt 0.093750 0.187500
vt 0.093750 0.625000
vt 0.093750 0.125000
vt 0.093750 0.562500
vt 0.093750 0.062500
vt 0.093750 0.500000
vt 0.109375 1.000000
vt 0.093750 0.937500
vt 0.109375 0.000000
vt 0.093750 0.437500
vt 0.093750 0.875000
vt 0.093750 0.375000
vt 0.062500 0.562500
vt 0.062500 0.500000
vt 0.078125 1.000000
vt 0.062500 0.937500
vt 0.078125 0.000000
vt 0.062500 0.062500
vt 0.062500 0.437500
vt 0.062500 0.875000
vt 0.062500 0.375000
vt 0.062500 0.812500
vt 0.062500 0.312500
vt 0.062500 0.750000
vt 0.062500 0.250000
vt 0.062500 0.687500
vt 0.062500 0.187500
vt 0.062500 0.625000
vt 0.062500 0.125000
vt 0.031250 0.312500
vt 0.031250 0.250000
vt 0.031250 0.750000
vt 0.031250 0.687500
vt 0.031250 0.187500
vt 0.031250 0.625000
vt 0.031250 0.125000
vt 0.031250 0.562500
vt 0.031250 0.062500
vt 0.031250 0.500000
vt 0.046875 1.000000
vt 0.031250 0.937500
vt 0.046875 0.000000
vt 0.031250 0.437500
vt 0.031250 0.875000
vt 0.031250 0.375000
vt 0.031250 0.812500
vt 0.015625 1.000000
vt 0.000000 0.937500
vt 0.015625 0.000000
vt 0.000000 0.062500
vt 0.000000 0.500000
vt 0.000000 0.437500
vt 0.000000 0.875000
vt 0.000000 0.375000
vt 0.000000 0.812500
vt 0.000000 0.312500
vt 0.000000 0.750000
vt 0.000000 0.250000
vt 0.000000 0.687500
vt 0.000000 0.187500
vt 0.000000 0.625000
vt 0.000000 0.125000
vt 0.000000 0.562500
vt 1.000000 0.687500
vt 1.000000 0.750000
vt 0.968750 0.750000
vt 0.968750 0.687500
vt 1.000000 0.187500
vt 1.000000 0.250000
vt 0.968750 0.250000
vt 0.968750 0.187500
vt 1.000000 0.625000
vt 0.968750 0.625000
vt 1.000000 0.125000
vt 0.968750 0.125000
vt 1.000000 0.562500
vt 0.968750 0.562500
vt 1.000000 0.062500
vt 0.968750 0.062500
vt 1.000000 0.500000
vt 0.968750 0.500000
vt 1.000000 0.937500
vt 0.984375 1.000000
vt 0.968750 0.937500
vt 0.984375 0.000000
vt 1.000000 0.437500
vt 0.968750 0.437500
vt 1.000000 0.875000
vt 0.968750 0.875000
vt 1.000000 0.375000
vt 0.968750 0.375000
vt 1.000000 0.812500
vt 0.968750 0.812500
vt 1.000000 0.312500
vt 0.968750 0.312500
vt 0.937500 0.500000
vt 0.937500 0.437500
vt 0.937500 0.937500
vt 0.937500 0.875000
vt 0.937500 0.375000
vt 0.937500 0.812500
vt 0.937500 0.312500
vt 0.937500 0.750000
vt 0.937500 0.250000
vt 0.937500 0.687500
vt 0.937500 0.187500
vt 0.937500 0.625000
vt 0.937500 0.125000
vt 0.937500 0.562500
vt 0.937500 0.062500
vt 0.953125 1.000000
vt 0.953125 0.000000
vt 0.906250 0.250000
vt 0.906250 0.187500
vt 0.906250 0.687500
vt 0.906250 0.625000
vt 0.906250 0.125000
vt 0.906250 0.562500
vt 0.906250 0.062500
vt 0.906250 0.500000
vt 0.921875 1.000000
vt 0.906250 0.937500
vt 0.921875 0.000000
vt 0.906250 0.437500
vt 0.906250 0.875000
vt 0.906250 0.375000
vt 0.906250 0.812500
vt 0.906250 0.312500
vt 0.906250 0.750000
vt 0.875000 0.437500
vt 0.875000 0.375000
vt 0.875000 0.875000
vt 0.875000 0.812500
vt 0.875000 0.312500
vt 0.875000 0.750000
vt 0.875000 0.250000
vt 0.875000 0.687500
vt 0.875000 0.187500
vt 0.875000 0.625000
vt 0.875000 0.125000
vt 0.875000 0.562500
vt 0.875000 0.062500
vt 0.875000 0.500000
vt 0.890625 1.000000
vt 0.875000 0.937500
vt 0.890625 0.000000
vt 0.843750 0.187500
vt 0.843750 0.125000
vt 0.843750 0.625000
vt 0.843750 0.562500
vt 0.843750 0.062500
vt 0.843750 0.500000
vt 0.859375 1.000000
vt 0.843750 0.937500
vt 0.859375 0.000000
vt 0.843750 0.437500
vt 0.843750 0.875000
vt 0.843750 0.375000
vt 0.843750 0.812500
vt 0.843750 0.312500
vt 0.843750 0.750000
vt 0.843750 0.250000
vt 0.843750 0.687500
vt 0.812500 0.875000
vt 0.812500 0.812500
vt 0.812500 0.375000
vt 0.812500 0.312500
vt 0.812500 0.750000
vt 0.812500 0.250000
vt 0.812500 0.687500
vt 0.812500 0.187500
vt 0.812500 0.625000
vt 0.812500 0.125000
vt 0.812500 0.562500
vt 0.812500 0.062500
vt 0.812500 0.500000
vt 0.828125 1.000000
vt 0.812500 0.937500
vt 0.828125 0.000000
vt 0.812500 0.437500
vt 0.781250 0.625000
vt 0.781250 0.562500
vt 0.781250 0.125000
vt 0.781250 0.062500
vt 0.781250 0.500000
vt 0.796875 1.000000
vt 0.781250 0.937500
vt 0.796875 0.000000
vt 0.781250 0.437500
vt 0.781250 0.875000
vt 0.781250 0.375000
vt 0.781250 0.812500
vt 0.781250 0.312500
vt 0.781250 0.750000
vt 0.781250 0.250000
vt 0.781250 0.687500
vt 0.781250 0.187500
vt 0.765625 1.000000
vt 0.765625 0.000000
s 0
usemtl Material.001
f 1/1/1 475/2/1 8/3/1 9/4/1
f 6/5/2 478/6/2 16/7/2 17/8/2
f 476/9/3 1/1/3 9/4/3 10/10/3
f 479/11/4 6/5/4 17/8/4 18/12/4
f 2/13/5 476/9/5 10/10/5 11/14/5
f 480/15/6 479/11/6 18/12/6 19/16/6
f 477/17/7 2/13/7 11/14/7 12/18/7
f 481/19/8 480/15/8 19/16/8 20/20/8
f 3/21/9 477/17/9 12/18/9 13/22/9
f 482/23/10 481/19/10 20/20/10 21/24/10
f 4/25/11 3/21/11 13/22/11 14/26/11
f 474/27/12 82/28/12 7/29/12
f 308/30/13 482/23/13 21/24/13
f 5/31/14 4/25/14 14/26/14 15/32/14
f 475/2/15 474/27/15 7/29/15 8/3/15
f 478/6/16 5/31/16 15/32/16 16/7/16
f 8/3/17 7/29/17 22/33/17 23/34/17
f 16/7/18 15/32/18 30/35/18 31/36/18
f 9/4/19 8/3/19 23/34/19 24/37/19
f 17/8/20 16/7/20 31/36/20 32/38/20
f 10/10/21 9/4/21 24/37/21 25/39/21
f 18/12/22 17/8/22 32/38/22 33/40/22
f 11/14/23 10/10/23 25/39/23 26/41/23
f 19/16/24 18/12/24 33/40/24 34/42/24
f 12/18/25 11/14/25 26/41/25 27/43/25
f 20/20/26 19/16/26 34/42/26 35/44/26
f 13/22/27 12/18/27 27/43/27 28/45/27
f 21/24/28 20/20/28 35/44/28 36/46/28
f 14/26/29 13/22/29 28/45/29 29/47/29
f 7/29/30 82/48/30 22/33/30
f 308/49/31 21/24/31 36/46/31
f 15/32/32 14/26/32 29/47/32 30/35/32
f 27/43/33 26/41/33 41/50/33 42/51/33
f 35/44/34 34/42/34 49/52/34 50/53/34
f 28/45/35 27/43/35 42/51/35 43/54/35
f 36/46/36 35/44/36 50/53/36 51/55/36
f 29/47/37 28/45/37 43/54/37 44/56/37
f 22/33/38 82/57/38 37/58/38
f 308/59/39 36/46/39 51/55/39
f 30/35/40 29/47/40 44/56/40 45/60/40
f 23/34/41 22/33/41 37/58/41 38/61/41
f 31/36/42 30/35/42 45/60/42 46/62/42
f 24/37/43 23/34/43 38/61/43 39/63/43
f 32/38/44 31/36/44 46/62/44 47/64/44
f 25/39/45 24/37/45 39/63/45 40/65/45
f 33/40/46 32/38/46 47/64/46 48/66/46
f 26/41/47 25/39/47 40/65/47 41/50/47
f 34/42/48 33/40/48 48/66/48 49/52/48
f 46/62/49 45/60/49 60/67/49 61/68/49
f 39/63/50 38/61/50 53/69/50 54/70/50
f 47/64/51 46/62/51 61/68/51 62/71/51
f 40/65/52 39/63/52 54/70/52 55/72/52
f 48/66/53 47/64/53 62/71/53 63/73/53
f 41/50/54 40/65/54 55/72/54 56/74/54
f 49/52/55 48/66/55 63/73/55 64/75/55
f 42/51/56 41/50/56 56/74/56 57/76/56
f 50/53/57 49/52/57 64/75/57 65/77/57
f 43/54/58 42/51/58 57/76/58 58/78/58
f 51/55/59 50/53/59 65/77/59 66/79/59
f 44/56/60 43/54/60 58/78/60 59/80/60
f 37/58/61 82/81/61 52/82/61
f 308/83/62 51/55/62 66/79/62
f 45/60/63 44/56/63 59/80/63 60/67/63
f 38/61/64 37/58/64 52/82/64 53/69/64
f 65/77/65 64/75/65 79/84/65 80/85/65
f 58/78/66 57/76/66 72/86/66 73/87/66
f 66/79/67 65/77/67 80/85/67 81/88/67
f 59/80/68 58/78/68 73/87/68 74/89/68
f 52/82/69 82/90/69 67/91/69
f 308/92/70 66/79/70 81/88/70
f 60/67/71 59/80/71 74/89/71 75/93/71
f 53/69/72 52/82/72 67/91/72 68/94/72
f 61/68/73 60/67/73 75/93/73 76/95/73
f 54/70/74 53/69/74 68/94/74 69/96/74
f 62/71/75 61/68/75 76/95/75 77/97/75
f 55/72/76 54/70/76 69/96/76 70/98/76
f 63/73/77 62/71/77 77/97/77 78/99/77
f 56/74/78 55/72/78 70/98/78 71/100/78
f 64/75/79 63/73/79 78/99/79 79/84/79
f 57/76/80 56/74/80 71/100/80 72/86/80
f 69/96/81 68/94/81 84/101/81 85/102/81
f 77/97/82 76/95/82 92/103/82 93/104/82
f 70/98/83 69/96/83 85/102/83 86/105/83
f 78/99/84 77/97/84 93/104/84 94/106/84
f 71/100/85 70/98/85 86/105/85 87/107/85
f 79/84/86 78/99/86 94/106/86 95/108/86
f 72/86/87 71/100/87 87/107/87 88/109/87
f 80/85/88 79/84/88 95/108/88 96/110/88
f 73/87/89 72/86/89 88/109/89 89/111/89
f 81/88/90 80/85/90 96/110/90 97/112/90
f 74/89/91 73/87/91 89/111/91 90/113/91
f 67/91/92 82/114/92 83/115/92
f 308/116/93 81/88/93 97/112/93
f 75/93/94 74/89/94 90/113/94 91/117/94
f 68/94/95 67/91/95 83/115/95 84/101/95
f 76/95/96 75/93/96 91/117/96 92/103/96
f 89/111/97 88/109/97 103/118/97 104/119/97
f 97/112/98 96/110/98 111/120/98 112/121/98
f 90/113/99 89/111/99 104/119/99 105/122/99
f 83/115/100 82/123/100 98/124/100
f 308/125/101 97/112/101 112/121/101
f 91/117/102 90/113/102 105/122/102 106/126/102
f 84/101/103 83/115/103 98/124/103 99/127/103
f 92/103/104 91/117/104 106/126/104 107/128/104
f 85/102/105 84/101/105 99/127/105 100/129/105
f 93/104/106 92/103/106 107/128/106 108/130/106
f 86/105/107 85/102/107 100/129/107 101/131/107
f 94/106/108 93/104/108 108/130/108 109/132/108
f 87/107/109 86/105/109 101/131/109 102/133/109
f 95/108/110 94/106/110 109/132/110 110/134/110
f 88/109/111 87/107/111 102/133/111 103/118/111
f 96/110/112 95/108/112 110/134/112 111/120/112
f 108/130/113 107/128/113 122/135/113 123/136/113
f 101/131/114 100/129/114 115/137/114 116/138/114
f 109/132/115 108/130/115 123/136/115 124/139/115
f 102/133/116 101/131/116 116/138/116 117/140/116
f 110/134/117 109/132/117 124/139/117 125/141/117
f 103/118/118 102/133/118 117/140/118 118/142/118
f 111/120/119 110/134/119 125/141/119 126/143/119
f 104/119/120 103/118/120 118/142/120 119/144/120
f 112/121/121 111/120/121 126/143/121 127/145/121
f 105/122/122 104/119/122 119/144/122 120/146/122
f 98/124/123 82/147/123 113/148/123
f 308/149/124 112/121/124 127/145/124
f 106/126/125 105/122/125 120/146/125 121/150/125
f 99/127/126 98/124/126 113/148/126 114/151/126
f 107/128/127 106/126/127 121/150/127 122/135/127
f 100/129/128 99/127/128 114/151/128 115/137/128
f 127/145/129 126/143/129 141/152/129 142/153/129
f 120/146/130 119/144/130 134/154/130 135/155/130
f 113/148/131 82/156/131 128/157/131
f 308/158/132 127/145/132 142/153/132
f 121/150/133 120/146/133 135/155/133 136/159/133
f 114/151/134 113/148/134 128/157/134 129/160/134
f 122/135/135 121/150/135 136/159/135 137/161/135
f 115/137/136 114/151/136 129/160/136 130/162/136
f 123/136/137 122/135/137 137/161/137 138/163/137
f 116/138/138 115/137/138 130/162/138 131/164/138
f 124/139/139 123/136/139 138/163/139 139/165/139
f 117/140/140 116/138/140 131/164/140 132/166/140
f 125/141/141 124/139/141 139/165/141 140/167/141
f 118/142/142 117/140/142 132/166/142 133/168/142
f 126/143/143 125/141/143 140/167/143 141/152/143
f 119/144/144 118/142/144 133/168/144 134/154/144
f 139/165/145 138/163/145 153/169/145 154/170/145
f 132/166/146 131/164/146 146/171/146 147/172/146
f 140/167/147 139/165/147 154/170/147 155/173/147
f 133/168/148 132/166/148 147/172/148 148/174/148
f 141/152/149 140/167/149 155/173/149 156/175/149
f 134/154/150 133/168/150 148/174/150 149/176/150
f 142/153/151 141/152/151 156/175/151 157/177/151
f 135/155/152 134/154/152 149/176/152 150/178/152
f 128/157/153 82/179/153 143/180/153
f 308/181/154 142/153/154 157/177/154
f 136/159/155 135/155/155 150/178/155 151/182/155
f 129/160/156 128/157/156 143/180/156 144/183/156
f 137/161/157 136/159/157 151/182/157 152/184/157
f 130/162/158 129/160/158 144/183/158 145/185/158
f 138/163/159 137/161/159 152/184/159 153/169/159
f 131/164/160 130/162/160 145/185/160 146/171/160
f 143/180/161 82/186/161 158/187/161
f 308/188/162 157/177/162 172/189/162
f 151/182/163 150/178/163 165/190/163 166/191/163
f 144/183/164 143/180/164 158/187/164 159/192/164
f 152/184/165 151/182/165 166/191/165 167/193/165
f 145/185/166 144/183/166 159/192/166 160/194/166
f 153/169/167 152/184/167 167/193/167 168/195/167
f 146/171/168 145/185/168 160/194/168 161/196/168
f 154/170/169 153/169/169 168/195/169 169/197/169
f 147/172/170 146/171/170 161/196/170 162/198/170
f 155/173/171 154/170/171 169/197/171 170/199/171
f 148/174/172 147/172/172 162/198/172 163/200/172
f 156/175/173 155/173/173 170/199/173 171/201/173
f 149/176/174 148/174/174 163/200/174 164/202/174
f 157/177/175 156/175/175 171/201/175 172/189/175
f 150/178/176 149/176/176 164/202/176 165/190/176
f 162/198/177 161/196/177 176/203/177 177/204/177
f 170/199/178 169/197/178 184/205/178 185/206/178
f 163/200/179 162/198/179 177/204/179 178/207/179
f 171/201/180 170/199/180 185/206/180 186/208/180
f 164/202/181 163/200/181 178/207/181 179/209/181
f 172/189/182 171/201/182 186/208/182 187/210/182
f 165/190/183 164/202/183 179/209/183 180/211/183
f 158/187/184 82/212/184 173/213/184
f 308/214/185 172/189/185 187/210/185
f 166/191/186 165/190/186 180/211/186 181/215/186
f 159/192/187 158/187/187 173/213/187 174/216/187
f 167/193/188 166/191/188 181/215/188 182/217/188
f 160/194/189 159/192/189 174/216/189 175/218/189
f 168/195/190 167/193/190 182/217/190 183/219/190
f 161/196/191 160/194/191 175/218/191 176/203/191
f 169/197/192 168/195/192 183/219/192 184/205/192
f 181/215/193 180/211/193 195/220/193 196/221/193
f 174/216/194 173/213/194 188/222/194 189/223/194
f 182/217/195 181/215/195 196/221/195 197/224/195
f 175/218/196 174/216/196 189/223/196 190/225/196
f 183/219/197 182/217/197 197/224/197 198/226/197
f 176/203/198 175/218/198 190/225/198 191/227/198
f 184/205/199 183/219/199 198/226/199 199/228/199
f 177/204/200 176/203/200 191/227/200 192/229/200
f 185/206/201 184/205/201 199/228/201 200/230/201
f 178/207/202 177/204/202 192/229/202 193/231/202
f 186/208/203 185/206/203 200/230/203 201/232/203
f 179/209/204 178/207/204 193/231/204 194/233/204
f 187/210/205 186/208/205 201/232/205 202/234/205
f 180/211/206 179/209/206 194/233/206 195/220/206
f 173/213/207 82/235/207 188/222/207
f 308/236/208 187/210/208 202/234/208
f 200/230/209 199/228/209 214/237/209 215/238/209
f 193/231/210 192/229/210 207/239/210 208/240/210
f 201/232/211 200/230/211 215/238/211 216/241/211
f 194/233/212 193/231/212 208/240/212 209/242/212
f 202/234/213 201/232/213 216/241/213 217/243/213
f 195/220/214 194/233/214 209/242/214 210/244/214
f 188/222/215 82/245/215 203/246/215
f 308/247/216 202/234/216 217/243/216
f 196/221/217 195/220/217 210/244/217 211/248/217
f 189/223/218 188/222/218 203/246/218 204/249/218
f 197/224/219 196/221/219 211/248/219 212/250/219
f 190/225/220 189/223/220 204/249/220 205/251/220
f 198/226/221 197/224/221 212/250/221 213/252/221
f 191/227/222 190/225/222 205/251/222 206/253/222
f 199/228/223 198/226/223 213/252/223 214/237/223
f 192/229/224 191/227/224 206/253/224 207/239/224
f 204/249/225 203/246/225 218/254/225 219/255/225
f 212/250/226 211/248/226 226/256/226 227/257/226
f 205/251/227 204/249/227 219/255/227 220/258/227
f 213/252/228 212/250/228 227/257/228 228/259/228
f 206/253/229 205/251/229 220/258/229 221/260/229
f 214/237/230 213/252/230 228/259/230 229/261/230
f 207/239/231 206/253/231 221/260/231 222/262/231
f 215/238/232 214/237/232 229/261/232 230/263/232
f 208/240/233 207/239/233 222/262/233 223/264/233
f 216/241/234 215/238/234 230/263/234 231/265/234
f 209/242/235 208/240/235 223/264/235 224/266/235
f 217/243/236 216/241/236 231/265/236 232/267/236
f 210/244/237 209/242/237 224/266/237 225/268/237
f 203/246/238 82/269/238 218/254/238
f 308/270/239 217/243/239 232/267/239
f 211/248/240 210/244/240 225/268/240 226/256/240
f 223/264/241 222/262/241 237/271/241 238/272/241
f 231/265/242 230/263/242 245/273/242 246/274/242
f 224/266/243 223/264/243 238/272/243 239/275/243
f 232/267/244 231/265/244 246/274/244 247/276/244
f 225/268/245 224/266/245 239/275/245 240/277/245
f 218/254/246 82/278/246 233/279/246
f 308/280/247 232/267/247 247/276/247
f 226/256/248 225/268/248 240/277/248 241/281/248
f 219/255/249 218/254/249 233/279/249 234/282/249
f 227/257/250 226/256/250 241/281/250 242/283/250
f 220/258/251 219/255/251 234/282/251 235/284/251
f 228/259/252 227/257/252 242/283/252 243/285/252
f 221/260/253 220/258/253 235/284/253 236/286/253
f 229/261/254 228/259/254 243/285/254 244/287/254
f 222/262/255 221/260/255 236/286/255 237/271/255
f 230/263/256 229/261/256 244/287/256 245/273/256
f 242/283/257 241/281/257 256/288/257 257/289/257
f 235/284/258 234/282/258 249/290/258 250/291/258
f 243/285/259 242/283/259 257/289/259 258/292/259
f 236/286/260 235/284/260 250/291/260 251/293/260
f 244/287/261 243/285/261 258/292/261 259/294/261
f 237/271/262 236/286/262 251/293/262 252/295/262
f 245/273/263 244/287/263 259/294/263 260/296/263
f 238/272/264 237/271/264 252/295/264 253/297/264
f 246/274/265 245/273/265 260/296/265 261/298/265
f 239/275/266 238/272/266 253/297/266 254/299/266
f 247/276/267 246/274/267 261/298/267 262/300/267
f 240/277/268 239/275/268 254/299/268 255/301/268
f 233/279/269 82/302/269 248/303/269
f 308/304/270 247/276/270 262/300/270
f 241/281/271 240/277/271 255/301/271 256/288/271
f 234/282/272 233/279/272 248/303/272 249/290/272
f 261/298/273 260/296/273 275/305/273 276/306/273
f 254/299/274 253/297/274 268/307/274 269/308/274
f 262/300/275 261/298/275 276/306/275 277/309/275
f 255/301/276 254/299/276 269/308/276 270/310/276
f 248/303/277 82/311/277 263/312/277
f 308/313/278 262/300/278 277/309/278
f 256/288/279 255/301/279 270/310/279 271/314/279
f 249/290/280 248/303/280 263/312/280 264/315/280
f 257/289/281 256/288/281 271/314/281 272/316/281
f 250/291/282 249/290/282 264/315/282 265/317/282
f 258/292/283 257/289/283 272/316/283 273/318/283
f 251/293/284 250/291/284 265/317/284 266/319/284
f 259/294/285 258/292/285 273/318/285 274/320/285
f 252/295/286 251/293/286 266/319/286 267/321/286
f 260/296/287 259/294/287 274/320/287 275/305/287
f 253/297/288 252/295/288 267/321/288 268/307/288
f 273/318/289 272/316/289 287/322/289 288/323/289
f 266/319/290 265/317/290 280/324/290 281/325/290
f 274/320/291 273/318/291 288/323/291 289/326/291
f 267/321/292 266/319/292 281/325/292 282/327/292
f 275/305/293 274/320/293 289/326/293 290/328/293
f 268/307/294 267/321/294 282/327/294 283/329/294
f 276/306/295 275/305/295 290/328/295 291/330/295
f 269/308/296 268/307/296 283/329/296 284/331/296
f 277/309/297 276/306/297 291/330/297 292/332/297
f 270/310/298 269/308/298 284/331/298 285/333/298
f 263/312/299 82/334/299 278/335/299
f 308/336/300 277/309/300 292/332/300
f 271/314/301 270/310/301 285/333/301 286/337/301
f 264/315/302 263/312/302 278/335/302 279/338/302
f 272/316/303 271/314/303 286/337/303 287/322/303
f 265/317/304 264/315/304 279/338/304 280/324/304
f 292/332/305 291/330/305 306/339/305 307/340/305
f 285/333/306 284/331/306 299/341/306 300/342/306
f 278/335/307 82/343/307 293/344/307
f 308/345/308 292/332/308 307/340/308
f 286/337/309 285/333/309 300/342/309 301/346/309
f 279/338/310 278/335/310 293/344/310 294/347/310
f 287/322/311 286/337/311 301/346/311 302/348/311
f 280/324/312 279/338/312 294/347/312 295/349/312
f 288/323/313 287/322/313 302/348/313 303/350/313
f 281/325/314 280/324/314 295/349/314 296/351/314
f 289/326/315 288/323/315 303/350/315 304/352/315
f 282/327/316 281/325/316 296/351/316 297/353/316
f 290/328/317 289/326/317 304/352/317 305/354/317
f 283/329/318 282/327/318 297/353/318 298/355/318
f 291/330/319 290/328/319 305/354/319 306/339/319
f 284/331/320 283/329/320 298/355/320 299/341/320
f 296/351/321 295/349/321 311/356/321 312/357/321
f 304/352/322 303/350/322 319/358/322 320/359/322
f 297/353/323 296/351/323 312/357/323 313/360/323
f 305/354/324 304/352/324 320/359/324 321/361/324
f 298/355/325 297/353/325 313/360/325 314/362/325
f 306/339/326 305/354/326 321/361/326 322/363/326
f 299/341/327 298/355/327 314/362/327 315/364/327
f 307/340/328 306/339/328 322/363/328 323/365/328
f 300/342/329 299/341/329 315/364/329 316/366/329
f 293/344/330 82/367/330 309/368/330
f 308/369/331 307/340/331 323/365/331
f 301/346/332 300/342/332 316/366/332 317/370/332
f 294/347/333 293/344/333 309/368/333 310/371/333
f 302/348/334 301/346/334 317/370/334 318/372/334
f 295/349/335 294/347/335 310/371/335 311/356/335
f 303/350/336 302/348/336 318/372/336 319/358/336
f 316/366/337 315/364/337 330/373/337 331/374/337
f 309/368/338 82/375/338 324/376/338
f 308/377/339 323/365/339 338/378/339
f 317/370/340 316/366/340 331/374/340 332/379/340
f 310/371/341 309/368/341 324/376/341 325/380/341
f 318/372/342 317/370/342 332/379/342 333/381/342
f 311/356/343 310/371/343 325/380/343 326/382/343
f 319/358/344 318/372/344 333/381/344 334/383/344
f 312/357/345 311/356/345 326/382/345 327/384/345
f 320/359/346 319/358/346 334/383/346 335/385/346
f 313/360/347 312/357/347 327/384/347 328/386/347
f 321/361/348 320/359/348 335/385/348 336/387/348
f 314/362/349 313/360/349 328/386/349 329/388/349
f 322/363/350 321/361/350 336/387/350 337/389/350
f 315/364/351 314/362/351 329/388/351 330/373/351
f 323/365/352 322/363/352 337/389/352 338/378/352
f 335/385/353 334/383/353 349/390/353 350/391/353
f 328/386/354 327/384/354 342/392/354 343/393/354
f 336/387/355 335/385/355 350/391/355 351/394/355
f 329/388/356 328/386/356 343/393/356 344/395/356
f 337/389/357 336/387/357 351/394/357 352/396/357
f 330/373/358 329/388/358 344/395/358 345/397/358
f 338/378/359 337/389/359 352/396/359 353/398/359
f 331/374/360 330/373/360 345/397/360 346/399/360
f 324/376/361 82/400/361 339/401/361
f 308/402/362 338/378/362 353/398/362
f 332/379/363 331/374/363 346/399/363 347/403/363
f 325/380/364 324/376/364 339/401/364 340/404/364
f 333/381/365 332/379/365 347/403/365 348/405/365
f 326/382/366 325/380/366 340/404/366 341/406/366
f 334/383/367 333/381/367 348/405/367 349/390/367
f 327/384/368 326/382/368 341/406/368 342/392/368
f 339/401/369 82/407/369 354/408/369
f 308/409/370 353/398/370 368/410/370
f 347/403/371 346/399/371 361/411/371 362/412/371
f 340/404/372 339/401/372 354/408/372 355/413/372
f 348/405/373 347/403/373 362/412/373 363/414/373
f 341/406/374 340/404/374 355/413/374 356/415/374
f 349/390/375 348/405/375 363/414/375 364/416/375
f 342/392/376 341/406/376 356/415/376 357/417/376
f 350/391/377 349/390/377 364/416/377 365/418/377
f 343/393/378 342/392/378 357/417/378 358/419/378
f 351/394/379 350/391/379 365/418/379 366/420/379
f 344/395/380 343/393/380 358/419/380 359/421/380
f 352/396/381 351/394/381 366/420/381 367/422/381
f 345/397/382 344/395/382 359/421/382 360/423/382
f 353/398/383 352/396/383 367/422/383 368/410/383
f 346/399/384 345/397/384 360/423/384 361/411/384
f 358/424/385 357/425/385 372/426/385 373/427/385
f 366/428/386 365/429/386 380/430/386 381/431/386
f 359/432/387 358/424/387 373/427/387 374/433/387
f 367/434/388 366/428/388 381/431/388 382/435/388
f 360/436/389 359/432/389 374/433/389 375/437/389
f 368/438/390 367/434/390 382/435/390 383/439/390
f 361/440/391 360/436/391 375/437/391 376/441/391
f 354/442/392 82/443/392 369/444/392
f 308/445/393 368/438/393 383/439/393
f 362/446/394 361/440/394 376/441/394 377/447/394
f 355/448/395 354/442/395 369/444/395 370/449/395
f 363/450/396 362/446/396 377/447/396 378/451/396
f 356/452/397 355/448/397 370/449/397 371/453/397
f 364/454/398 363/450/398 378/451/398 379/455/398
f 357/425/399 356/452/399 371/453/399 372/426/399
f 365/429/400 364/454/400 379/455/400 380/430/400
f 377/447/401 376/441/401 391/456/401 392/457/401
f 370/449/402 369/444/402 384/458/402 385/459/402
f 378/451/403 377/447/403 392/457/403 393/460/403
f 371/453/404 370/449/404 385/459/404 386/461/404
f 379/455/405 378/451/405 393/460/405 394/462/405
f 372/426/406 371/453/406 386/461/406 387/463/406
f 380/430/407 379/455/407 394/462/407 395/464/407
f 373/427/408 372/426/408 387/463/408 388/465/408
f 381/431/409 380/430/409 395/464/409 396/466/409
f 374/433/410 373/427/410 388/465/410 389/467/410
f 382/435/411 381/431/411 396/466/411 397/468/411
f 375/437/412 374/433/412 389/467/412 390/469/412
f 383/439/413 382/435/413 397/468/413 398/470/413
f 376/441/414 375/437/414 390/469/414 391/456/414
f 369/444/415 82/471/415 384/458/415
f 308/472/416 383/439/416 398/470/416
f 396/466/417 395/464/417 410/473/417 411/474/417
f 389/467/418 388/465/418 403/475/418 404/476/418
f 397/468/419 396/466/419 411/474/419 412/477/419
f 390/469/420 389/467/420 404/476/420 405/478/420
f 398/470/421 397/468/421 412/477/421 413/479/421
f 391/456/422 390/469/422 405/478/422 406/480/422
f 384/458/423 82/481/423 399/482/423
f 308/483/424 398/470/424 413/479/424
f 392/457/425 391/456/425 406/480/425 407/484/425
f 385/459/426 384/458/426 399/482/426 400/485/426
f 393/460/427 392/457/427 407/484/427 408/486/427
f 386/461/428 385/459/428 400/485/428 401/487/428
f 394/462/429 393/460/429 408/486/429 409/488/429
f 387/463/430 386/461/430 401/487/430 402/489/430
f 395/464/431 394/462/431 409/488/431 410/473/431
f 388/465/432 387/463/432 402/489/432 403/475/432
f 408/486/433 407/484/433 422/490/433 423/491/433
f 401/487/434 400/485/434 415/492/434 416/493/434
f 409/488/435 408/486/435 423/491/435 424/494/435
f 402/489/436 401/487/436 416/493/436 417/495/436
f 410/473/437 409/488/437 424/494/437 425/496/437
f 403/475/438 402/489/438 417/495/438 418/497/438
f 411/474/439 410/473/439 425/496/439 426/498/439
f 404/476/440 403/475/440 418/497/440 419/499/440
f 412/477/441 411/474/441 426/498/441 427/500/441
f 405/478/442 404/476/442 419/499/442 420/501/442
f 413/479/443 412/477/443 427/500/443 428/502/443
f 406/480/444 405/478/444 420/501/444 421/503/444
f 399/482/445 82/504/445 414/505/445
f 308/506/446 413/479/446 428/502/446
f 407/484/447 406/480/447 421/503/447 422/490/447
f 400/485/448 399/482/448 414/505/448 415/492/448
f 427/500/449 426/498/449 441/507/449 442/508/449
f 420/501/450 419/499/450 434/509/450 435/510/450
f 428/502/451 427/500/451 442/508/451 443/511/451
f 421/503/452 420/501/452 435/510/452 436/512/452
f 414/505/453 82/513/453 429/514/453
f 308/515/454 428/502/454 443/511/454
f 422/490/455 421/503/455 436/512/455 437/516/455
f 415/492/456 414/505/456 429/514/456 430/517/456
f 423/491/457 422/490/457 437/516/457 438/518/457
f 416/493/458 415/492/458 430/517/458 431/519/458
f 424/494/459 423/491/459 438/518/459 439/520/459
f 417/495/460 416/493/460 431/519/460 432/521/460
f 425/496/461 424/494/461 439/520/461 440/522/461
f 418/497/462 417/495/462 432/521/462 433/523/462
f 426/498/463 425/496/463 440/522/463 441/507/463
f 419/499/464 418/497/464 433/523/464 434/509/464
f 431/519/465 430/517/465 445/524/465 446/525/465
f 439/520/466 438/518/466 453/526/466 454/527/466
f 432/521/467 431/519/467 446/525/467 447/528/467
f 440/522/468 439/520/468 454/527/468 455/529/468
f 433/523/469 432/521/469 447/528/469 448/530/469
f 441/507/470 440/522/470 455/529/470 456/531/470
f 434/509/471 433/523/471 448/530/471 449/532/471
f 442/508/472 441/507/472 456/531/472 457/533/472
f 435/510/473 434/509/473 449/532/473 450/534/473
f 443/511/474 442/508/474 457/533/474 458/535/474
f 436/512/475 435/510/475 450/534/475 451/536/475
f 429/514/476 82/537/476 444/538/476
f 308/539/477 443/511/477 458/535/477
f 437/516/478 436/512/478 451/536/478 452/540/478
f 430/517/479 429/514/479 444/538/479 445/524/479
f 438/518/480 437/516/480 452/540/480 453/526/480
f 450/534/481 449/532/481 464/541/481 465/542/481
f 458/535/482 457/533/482 472/543/482 473/544/482
f 451/536/483 450/534/483 465/542/483 466/545/483
f 444/538/484 82/546/484 459/547/484
f 308/548/485 458/535/485 473/544/485
f 452/540/486 451/536/486 466/545/486 467/549/486
f 445/524/487 444/538/487 459/547/487 460/550/487
f 453/526/488 452/540/488 467/549/488 468/551/488
f 446/525/489 445/524/489 460/550/489 461/552/489
f 454/527/490 453/526/490 468/551/490 469/553/490
f 447/528/491 446/525/491 461/552/491 462/554/491
f 455/529/492 454/527/492 469/553/492 470/555/492
f 448/530/493 447/528/493 462/554/493 463/556/493
f 456/531/494 455/529/494 470/555/494 471/557/494
f 449/532/495 448/530/495 463/556/495 464/541/495
f 457/533/496 456/531/496 471/557/496 472/543/496
f 469/553/497 468/551/497 478/6/497 6/5/497
f 462/554/498 461/552/498 1/1/498 476/9/498
f 470/555/499 469/553/499 6/5/499 479/11/499
f 463/556/500 462/554/500 476/9/500 2/13/500
f 471/557/501 470/555/501 479/11/501 480/15/501
f 464/541/502 463/556/502 2/13/502 477/17/502
f 472/543/503 471/557/503 480/15/503 481/19/503
f 465/542/504 464/541/504 477/17/504 3/21/504
f 473/544/505 472/543/505 481/19/505 482/23/505
f 466/545/506 465/542/506 3/21/506 4/25/506
f 459/547/507 82/558/507 474/27/507
f 308/559/508 473/544/508 482/23/508
f 467/549/509 466/545/509 4/25/509 5/31/509
f 460/550/510 459/547/510 474/27/510 475/2/510
f 468/551/511 467/549/511 5/31/511 478/6/511
f 461/552/512 460/550/512 475/2/512 1/1/512
`

var arm = `v -1.000000 0.046683 1.000000
v -1.000000 6.152205 1.000000
v -1.000000 0.046683 0.400585
v -1.000000 6.152205 0.400585
v -0.704566 0.194279 0.852404
v -0.852163 0.046683 1.000000
v -0.852163 6.152205 1.000000
v -0.704566 6.004608 0.852404
v -0.704566 0.194279 0.548181
v -0.852163 0.046683 0.400585
v -0.704566 6.004608 0.548181
v -0.852163 6.152205 0.400585

vn -1.0000 -0.0000 -0.0000
vn -0.0000 -0.0000 1.0000
vn -0.0000 1.0000 -0.0000
vn 1.0000 -0.0000 -0.0000
vn -0.0000 -0.0000 -1.0000
vn 0.7071 -0.0000 -0.7071
vn 0.7071 -0.7071 -0.0000
vn 0.7071 0.7071 -0.0000
vn 0.7071 -0.0000 0.7071
vn -0.0000 -1.0000 -0.0000

vt 0.375000 0.000000
vt 0.625000 0.000000
vt 0.625000 0.250000
vt 0.375000 0.250000
vt 0.375000 0.874898
vt 0.625000 0.874898
vt 0.625000 1.000000
vt 0.375000 1.000000
vt 0.749898 0.500000
vt 0.875000 0.500000
vt 0.875000 0.750000
vt 0.749898 0.750000
vt 0.381044 0.561558
vt 0.618956 0.561558
vt 0.618956 0.688441
vt 0.381044 0.688441
vt 0.625000 0.375102
vt 0.375000 0.375102
vt 0.250102 0.750000
vt 0.250102 0.500000
vt 0.125000 0.500000
vt 0.125000 0.750000

f 1/1/1 2/2/1 4/3/1 3/4/1
f 6/5/2 7/6/2 2/7/2 1/8/2
f 12/9/3 4/10/3 2/11/3 7/12/3
f 9/13/4 11/14/4 8/15/4 5/16/4
f 3/4/5 4/3/5 12/17/5 10/18/5
f 11/14/6 9/13/6 10/18/6 12/17/6
f 6/19/7 10/20/7 9/13/7 5/16/7
f 12/9/8 7/12/8 8/15/8 11/14/8
f 7/6/9 6/5/9 5/16/9 8/15/9
f 3/21/10 10/20/10 6/19/10 1/22/10`


var VSHADER_SOURCE = `
    attribute vec3 a_Position;
    attribute vec3 a_Normal;

    uniform mat4 u_Model;
    uniform mat4 u_World;
    uniform mat4 u_Camera;
    uniform mat4 u_Projective;

    attribute vec2 a_TexCoord;
    varying vec2 v_TexCoord;

    varying vec3 v_Normal;
    varying vec3 v_Position;
    void main() {
        gl_Position = u_Projective * u_Camera * u_World * u_Model * vec4(a_Position, 1.0);
        v_Normal = a_Normal;
        v_Position = a_Position;
        v_TexCoord = a_TexCoord;
    }
`

var FSHADER_SOURCE = `
    precision mediump float;
    
    // Setup our varyings
    varying vec3 v_Normal;
    varying vec3 v_Position;

    // determine whether or not to use lighting
    uniform int u_Lighting;
    

    // texture
    uniform int u_Texture;
    varying vec2 v_TexCoord;
    uniform sampler2D u_Texture1;


    // Note that our uniforms need not be declared in the vertex shader
    uniform highp mat4 u_Model;
    uniform highp mat4 u_World;
    uniform highp mat4 u_Camera;
    uniform highp mat4 u_CameraInverse;
    uniform highp mat4 u_InverseTranspose; // for normal transformation, model and world
    uniform vec3 u_Light; // where the light is located
    uniform vec3 u_AmbientLight; // the lighting from the world
    uniform vec3 u_DiffuseColor; // the base color of the model
    uniform float u_SpecPower; // the specular "power" of the light on this model
    uniform vec3 u_SpecColor; // the specular color on this model

    // Reminder, since this comes up a lot in this math
    // for points A and B, B-A produces the vector pointing from A to B

    // helper function for homogeneous transformation
    mediump vec3 hom_reduce(mediump vec4 v) {
        // component-wise division of v
        return vec3(v) / v.w;
    }

    void main() {
        vec4 texColor = texture2D(u_Texture1, v_TexCoord);
        

        if (u_Lighting > 0) {
            // usual normal transformation
            vec3 worldNormal = normalize(mat3(u_InverseTranspose) * normalize(v_Normal));
            // usual position transformation
            vec3 worldPos = hom_reduce(u_World * u_Model * vec4(v_Position, 1.0));

            // also transform the position into the camera space to calculate the specular
            vec3 cameraPos = hom_reduce(u_Camera * vec4(worldPos, 1.0));

            // calculate our light direction
            vec3 lightDir = normalize(u_Light - worldPos); // get the direction towards the light

            // first, calculate our diffuse light
            float diffuse = dot(lightDir, worldNormal);

            // second, calculate our specular highlight
            // see https://learnopengl.com/Lighting/Basic-Lighting for more details
            vec3 reflectDir = normalize(reflect(-lightDir, worldNormal)); // reflect the light past our normal

            // We need our reflection to be in Camera space
            // note that this is a direction rather than a normal
            // so we don't need an inverse transpose of the world->camera matrix
            // but we _do_ need to apply a linear operation, so we use mat3
            vec3 cameraReflectDir = normalize(mat3(u_Camera) * reflectDir);

            // Now, get the direction to the camera, noting that the camera is at 0, 0, 0 in camera space
            vec3 cameraDir = normalize(-cameraPos);

            // calculate the angle between the cameraDir and
            //   the reflected light direction _toward_ the camera(in camera space)
            float angle = max(dot(cameraDir, cameraReflectDir), 0.0);
            // calculate fall-off with power
            float specular = pow(angle, u_SpecPower);

            // finally, add our lights together
            // note that webGL will take the min(1.0, color) for us for each color component
                            
            gl_FragColor = vec4(u_AmbientLight + diffuse * u_DiffuseColor + specular * u_SpecColor, 1.0) * texColor;
        }
        else {
            gl_FragColor = vec4(u_AmbientLight, 1.0);
        }
    }
`

// the rotation matrix being updated each frame
var g_model_matrix

// the current axis of rotation (for all teapots)
var g_rotation_axis

// references to general information
var g_canvas
var gl

// pointers
var g_lighting_ref
var g_vertex_count
var g_model_ref
var g_camera_ref
var g_projection_ref
var g_inverse_transpose_ref
var g_camera_inverse_transpose_ref
var g_light_ref
var g_ambient_light
var g_diffuse_color
var g_spec_power
var g_spec_color
var g_last_frame_ms
var g_texture_ref
var texture1
var texture2
var texture3

// grid
var g_grid_vertex_count

// global parameters
var g_light_x
var g_light_y
var g_light_z
var g_camera_x
var g_camera_y
var g_camera_z
var g_near
var g_far
var g_fovy
var g_aspect

// constants for setup
const INITIAL_LIGHT_X = 0
const INITIAL_LIGHT_Y = 4
const INITIAL_LIGHT_Z = -2
const INITIAL_CAMERA_X = 0
const INITIAL_CAMERA_Y = 2
const INITIAL_CAMERA_Z = 0
const INITIAL_NEAR = 1
const INITIAL_FAR = 200
const INITIAL_FOVY = 90
const INITIAL_ASPECT = 1

// Matrices for positioning the grid
var g_model_matrix_grid
var g_world_matrix_grid


var g_model_matrix_1
var g_world_matrix_1
var g_model_matrix_2
var g_world_matrix_2
var g_model_matrix_3
var g_world_matrix_3
var g_model_matrix_4
var g_world_matrix_4
var g_model_matrix_5
var g_world_matrix_5
var g_model_matrix_6
var g_world_matrix_6
var g_model_matrix_7
var g_world_matrix_7
var g_model_matrix_8
var g_world_matrix_8

//assembly meshes
var result = parse_obj(cyl)
cyl_verts = result[0]
cyl_mesh = result[1]
cyl_vertexcount = result[2]
cyl_normals = result[3]
cyl_tex = result[4]

var result = parse_obj(sphere)
sp_verts = result[0]
sp_mesh = result[1]
sp_vertexcount = result[2]
sp_normals = result[3]
sp_tex = result[4]

var result = parse_obj(arm)
arm_verts = result[0]
arm_mesh = result[1]
arm_vertexcount = result[2]
arm_normals = result[3]
arm_tex = result[4]

// the number of floats in each mesh vertex element (e.g. vec3)
var MESH_VERTEX_SIZE = 3

function main() {

    // Listen for slider changes
    slider_input = document.getElementById('sliderLightX')
    slider_input.addEventListener('input', (event) => {
        updateLightX(event.target.value)
    })
    slider_input = document.getElementById('sliderLightY')
    slider_input.addEventListener('input', (event) => {
        updateLightY(event.target.value)
    })
    slider_input = document.getElementById('sliderLightZ')
    slider_input.addEventListener('input', (event) => {
        updateLightZ(event.target.value)
    })

    slider_input = document.getElementById('sliderCamX')
    slider_input.addEventListener('input', (event) => {
        updateCameraX(event.target.value)
    })
    slider_input = document.getElementById('sliderCamY')
    slider_input.addEventListener('input', (event) => {
        updateCameraY(event.target.value)
    })
    slider_input = document.getElementById('sliderCamZ')
    slider_input.addEventListener('input', (event) => {
        updateCameraZ(event.target.value)
    })

    slider_input = document.getElementById('sliderNear')
    slider_input.addEventListener('input', (event) => {
        updateNear(event.target.value)
    })

    slider_input = document.getElementById('sliderFar')
    slider_input.addEventListener('input', (event) => {
        updateFar(event.target.value)
    })

    slider_input = document.getElementById('sliderFOVY')
    slider_input.addEventListener('input', (event) => {
        updateFOVY(event.target.value)
    })

    slider_input = document.getElementById('sliderAspect')
    slider_input.addEventListener('input', (event) => {
        updateAspect(event.target.value)
    })

    g_canvas = document.getElementById('webgl');

    // Get the rendering context for WebGL
    gl = getWebGLContext(g_canvas, true);
    if (!gl) {
        console.log('Failed to get the rendering context for WebGL');
        return;
    }

    // Initialize GPU's vertex and fragment shaders programs
    if (!initShaders(gl, VSHADER_SOURCE, FSHADER_SOURCE)) {
        console.log('Failed to intialize shaders.')
        return;
    }

    // set the vertex count
    g_vertex_count = TEAPOT_MESH.length / 3

    // get the VBO handle
    var VBOloc = gl.createBuffer();
    if (!VBOloc) {
        console.log('Failed to create the vertex buffer object')
        return -1
    }

    grid_data = build_grid_attributes(1, 1)
    grid_mesh = grid_data[0]
    grid_normals = grid_data[1] // fake normals

    //create dummy teapot, grid textures 
    teapot_tex = []
    grid_tex = []
    for (var i = 0; i < TEAPOT_MESH.length/3; i++){
        teapot_tex.push(0.0, 0.0)
    }
    for (var i = 0; i < grid_mesh.length/3; i++){
        grid_tex.push(0.0, 0.0)
    }

    // put the normal attributes after our mesh
    var meshes = TEAPOT_MESH.concat(grid_mesh).concat(cyl_mesh).concat(sp_mesh).concat(arm_mesh)
    var normals = TEAPOT_NORMALS.concat(grid_normals).concat(cyl_normals).concat(sp_normals).concat(arm_normals)
    var textures = teapot_tex.concat(grid_tex).concat(cyl_tex).concat(sp_tex).concat(arm_mesh)
    gl.bindBuffer(gl.ARRAY_BUFFER, VBOloc)
    var attributes = meshes.concat(normals).concat(textures)
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(attributes), gl.STATIC_DRAW)

    const FLOAT_SIZE = 4

    // put the attributes on the VBO
    if (setup_vec3('a_Position', 3, 0) < 0) {
        return -1
    }
    if (setup_vec3('a_Normal', 3, meshes.length * 4) < 0) {
        return -1
    }
    if (setup_vec3('a_TexCoord', 2, meshes.length * 4 + normals.length * 4) < 0) {
        return -1
    }

    console.log('hey')
    console.log(attributes.length/3)
    console.log((TEAPOT_MESH.length + grid_mesh.length + cyl_mesh.length)/3)
    console.log((TEAPOT_NORMALS).concat(grid_normals).concat(cyl_normals).length/3)

    // reference to our pointers
    g_lighting_ref = gl.getUniformLocation(gl.program, 'u_Lighting')
    g_texture_ref = gl.getUniformLocation(gl.program, 'u_Texture')
    g_model_ref = gl.getUniformLocation(gl.program, 'u_Model')
    g_world_ref = gl.getUniformLocation(gl.program, 'u_World')
    g_camera_ref = gl.getUniformLocation(gl.program, 'u_Camera')
    g_projection_ref = gl.getUniformLocation(gl.program, 'u_Projective')
    g_inverse_transpose_ref = gl.getUniformLocation(gl.program, 'u_InverseTranspose')
    g_light_ref = gl.getUniformLocation(gl.program, 'u_Light')
    g_ambient_light = gl.getUniformLocation(gl.program, 'u_AmbientLight')
    g_diffuse_color = gl.getUniformLocation(gl.program, 'u_DiffuseColor')
    g_spec_power = gl.getUniformLocation(gl.program, 'u_SpecPower')
    g_spec_color = gl.getUniformLocation(gl.program, 'u_SpecColor')

    // setup our teapot with heavy scaling
    // Note the negative z-scaling to get into right-handed coordinates
    //ME MODEL
    g_model_matrix = new Matrix4().setScale(.01, .01, -.01)
    g_model_matrix_1 = new Matrix4().setScale(0.5, 1.5, 0.5)
    g_model_matrix_2 = new Matrix4().setScale(0.5, 0.5, 0.5).rotate(180, -1, 0, 1)
    g_model_matrix_3 = new Matrix4().setScale(0.3, 0.5, 0.5).rotate(90, 0, 0, 1)

    // move the teapot in view of the camera
    g_world_matrix = new Matrix4().translate(0, 1, 4)
    g_world_matrix_1 = new Matrix4().translate(-2, 0, 4)
    g_world_matrix_2 = new Matrix4().translate(-2, 2, 4)
    g_world_matrix_3 = new Matrix4().translate(-0.2, 1.8, 3.5)

    //MAYA MODEL
    g_model_matrix_4 = new Matrix4().setScale(0.5, 1.5, 0.5)
    g_model_matrix_5 = new Matrix4().setScale(0.5, 0.5, 0.5).rotate(180, -1, 0, 1)
    g_model_matrix_6 = new Matrix4().setScale(0.3, 0.5, 0.5).rotate(120, 0, 0, 1)
    g_model_matrix_7 = new Matrix4().setScale(0.3, 0.5, 0.5).rotate(60, 0, 0, 1)
    g_model_matrix_8 = new Matrix4().setScale(0.3, 0.5, 0.5).rotate(90, 0, 0, 1)

    g_world_matrix_4 = new Matrix4().translate(2, 0, 4)
    g_world_matrix_5 = new Matrix4().translate(2, 2, 4)
    g_world_matrix_6 = new Matrix4().translate(3.5, 2.7, 3.5)
    g_world_matrix_7 = new Matrix4().translate(2, 1.5, 3.5)
    g_world_matrix_8 = new Matrix4().translate(-2, 1.8, 3.5)





    // Put the grid "below" the camera (and cubes)
    g_model_matrix_grid = new Matrix4()
    g_world_matrix_grid = new Matrix4().translate(0, -2, 0)

    gl.enable(gl.CULL_FACE)
    // Enable a depth test with perspective
    gl.enable(gl.DEPTH_TEST)

    // Setup for ticks
    g_last_frame_ms = Date.now()
    g_rotation_axis = [0, 1, 0]

    // Initialize our data
    updateLightX(INITIAL_LIGHT_X)
    updateLightY(INITIAL_LIGHT_Y)
    updateLightZ(INITIAL_LIGHT_Z)
    updateCameraX(INITIAL_CAMERA_X)
    updateCameraY(INITIAL_CAMERA_Y)
    updateCameraZ(INITIAL_CAMERA_Z)
    updateNear(INITIAL_NEAR)
    updateFar(INITIAL_FAR)
    updateFOVY(INITIAL_FOVY)
    updateAspect(INITIAL_ASPECT)


    //load textures https://stackoverflow.com/questions/11292599/how-to-use-multiple-textures-in-webgl
    texture1 = gl.createTexture();
    var image1 = new Image();
    image1.src = "timo1.png";
  // image1.crossOrigin = "Anonymous";
    image1.addEventListener('load', function() {
        gl.bindTexture(gl.TEXTURE_2D, texture1);
        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA,gl.UNSIGNED_BYTE, image1);
        gl.generateMipmap(gl.TEXTURE_2D);
    });
    texture2 = gl.createTexture();
    var image2 = new Image();
    image2.src = "mayaq.png";
  //image2.crossOrigin = "Anonymous";
    image2.addEventListener('load', function() {
        gl.bindTexture(gl.TEXTURE_2D, texture2);
        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA,gl.UNSIGNED_BYTE, image2);
        gl.generateMipmap(gl.TEXTURE_2D);
    });
    texture3 = gl.createTexture();
    gl.bindTexture(gl.TEXTURE_2D, texture3)
    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE,
        new Uint8Array([0, 0, 255, 255]));

    tick()
}

// extra constants for cleanliness
const ROTATION_SPEED = .005
var PERIODICITY = 1000 // in milliseconds
var period = 0
var dir = 1

// function to apply all the logic for a single frame tick
function tick() {
    // time since the last frame
    // caution: on the first frame, this may be zero
    // and in general, this may be close to zero
    // NOTE: Be sure to use this delta_time!
    //   otherwise your animation will be framerate-dependent!
    var delta_time

    // calculate time since the last frame
    var current_time = Date.now()
    delta_time = current_time - g_last_frame_ms
    g_last_frame_ms = current_time
    period += delta_time
    if (period > PERIODICITY) {
        //console.log(g_pincer_direction)
        period -= PERIODICITY
        dir = -dir
    }

    // rotate the arm constantly around the given axis (of the model)
    angle = ROTATION_SPEED * delta_time
    g_model_matrix.concat(new Matrix4().setRotate(-angle * dir, 0,0,1))
    g_model_matrix_7.concat(new Matrix4().setRotate(angle * dir, 0,0,1))
    g_model_matrix_6.concat(new Matrix4().setRotate(angle * -dir, 0,0,1))

    draw()

    requestAnimationFrame(tick, g_canvas)
}

// draw to the screen on the next frame
function draw() {
    // setup our camera
    // always look at the teapot (a constant number because I'm lazy)
    var camera_matrix = new Matrix4().setLookAt(-g_camera_x, g_camera_y, g_camera_z, 0, 0, 4, 0, 1, 0)
    gl.uniformMatrix4fv(g_camera_ref, false, camera_matrix.elements)
    var perspective_matrix = new Matrix4().setPerspective(g_fovy, g_aspect, g_near, g_far)
    gl.uniformMatrix4fv(g_projection_ref, false, perspective_matrix.elements)

    // setup our light source
    // note the negative X-direction to make us right-handed
    gl.uniform3fv(g_light_ref, new Float32Array([-g_light_x, g_light_y, g_light_z]))

    // Update with our global model and world matrices
    gl.uniformMatrix4fv(g_model_ref, false, g_model_matrix.elements)
    gl.uniformMatrix4fv(g_world_ref, false, g_world_matrix.elements)
    var inv = new Matrix4(g_world_matrix)
        .concat(g_model_matrix)
        .invert().transpose()
    gl.uniformMatrix4fv(g_inverse_transpose_ref, false, inv.elements)

    // Clear the canvas with a black background
    gl.clearColor(0.0, 0.0, 0.0, 1.0)
    gl.clear(gl.COLOR_BUFFER_BIT)



    // use lighting for the teapot
    gl.uniform1i(g_lighting_ref, 1)
    gl.activeTexture(gl.TEXTURE0);
    gl.bindTexture(gl.TEXTURE_2D, texture3); 

    // set a position and colors for the teapot, and draw
    
    gl.uniform3fv(g_ambient_light, new Float32Array([0, 0, 0]))
    gl.uniform3fv(g_diffuse_color, new Float32Array([1, 1, 1]))
    gl.uniform1f(g_spec_power, 64.0)
    gl.uniform3fv(g_spec_color, new Float32Array([1, 1, 1]))

    gl.drawArrays(gl.TRIANGLES, 0, g_vertex_count)

    // Draw the grid with gl.lines
    // Note that we can use the regular vertex offset with gl.LINES
    gl.uniform1i(g_lighting_ref, 0) // don't use lighting for the grid
    gl.uniform3fv(g_ambient_light, new Float32Array([0, 1, 0])) // grid is green
    gl.uniformMatrix4fv(g_model_ref, false, g_model_matrix_grid.elements)
    gl.uniformMatrix4fv(g_world_ref, false, g_world_matrix_grid.elements)
    gl.drawArrays(gl.LINES, TEAPOT_MESH.length / 3, g_grid_vertex_count)

    //cylinders
    //a1
    gl.uniform1i(g_lighting_ref, 1)
    gl.uniformMatrix4fv(g_model_ref, false, g_model_matrix_1.elements)
    gl.uniformMatrix4fv(g_world_ref, false, g_world_matrix_1.elements)
    var inv = new Matrix4(g_world_matrix_1)
        .concat(g_model_matrix_1)
        .invert().transpose()
    gl.uniformMatrix4fv(g_inverse_transpose_ref, false, inv.elements)

    gl.uniform3fv(g_ambient_light, new Float32Array([0, 0, 0]))
    gl.uniform3fv(g_diffuse_color, new Float32Array([1, 1, 1]))
    gl.uniform1f(g_spec_power, 64.0)
    gl.uniform3fv(g_spec_color, new Float32Array([1, 1, 1]))
    gl.drawArrays(gl.TRIANGLES, (g_vertex_count + g_grid_vertex_count), cyl_mesh.length/3)
    //a2
    gl.uniformMatrix4fv(g_model_ref, false, g_model_matrix_4.elements)
    gl.uniformMatrix4fv(g_world_ref, false, g_world_matrix_4.elements)
    var inv = new Matrix4(g_world_matrix_4)
        .concat(g_model_matrix_4)
        .invert().transpose()
    gl.uniformMatrix4fv(g_inverse_transpose_ref, false, inv.elements)

    gl.uniform3fv(g_ambient_light, new Float32Array([0, 0, 0]))
    gl.uniform3fv(g_diffuse_color, new Float32Array([1, 1, 1]))
    gl.uniform1f(g_spec_power, 64.0)
    gl.uniform3fv(g_spec_color, new Float32Array([1, 1, 1]))
    gl.drawArrays(gl.TRIANGLES, (g_vertex_count + g_grid_vertex_count), cyl_mesh.length/3)


    //sphere
    //a1
    gl.activeTexture(gl.TEXTURE0);
    gl.bindTexture(gl.TEXTURE_2D, texture1); 
    gl.uniformMatrix4fv(g_model_ref, false, g_model_matrix_2.elements)
    gl.uniformMatrix4fv(g_world_ref, false, g_world_matrix_2.elements)
    var inv = new Matrix4(g_world_matrix_2)
        .concat(g_model_matrix_2)
        .invert().transpose()
    gl.uniformMatrix4fv(g_inverse_transpose_ref, false, inv.elements)

    gl.uniform3fv(g_ambient_light, new Float32Array([0, 0, 0]))
    gl.uniform3fv(g_diffuse_color, new Float32Array([1, 1, 1]))
    gl.uniform1f(g_spec_power, 64.0)
    gl.uniform3fv(g_spec_color, new Float32Array([1, 1, 1]))
    gl.drawArrays(gl.TRIANGLES, (g_vertex_count + g_grid_vertex_count + cyl_mesh.length/3), sp_mesh.length/3)
    //a2
    gl.activeTexture(gl.TEXTURE0);
    gl.bindTexture(gl.TEXTURE_2D, texture2); 
    gl.uniformMatrix4fv(g_model_ref, false, g_model_matrix_5.elements)
    gl.uniformMatrix4fv(g_world_ref, false, g_world_matrix_5.elements)
    var inv = new Matrix4(g_world_matrix_5)
        .concat(g_model_matrix_5)
        .invert().transpose()
    gl.uniformMatrix4fv(g_inverse_transpose_ref, false, inv.elements)

    gl.uniform3fv(g_ambient_light, new Float32Array([0, 0, 0]))
    gl.uniform3fv(g_diffuse_color, new Float32Array([1, 1, 1]))
    gl.uniform1f(g_spec_power, 64.0)
    gl.uniform3fv(g_spec_color, new Float32Array([1, 1, 1]))
    gl.drawArrays(gl.TRIANGLES, (g_vertex_count + g_grid_vertex_count + cyl_mesh.length/3), sp_mesh.length/3)


    //arms
    gl.activeTexture(gl.TEXTURE0);
    gl.bindTexture(gl.TEXTURE_2D, texture3); 
    //a1
    //arm1
    
    gl.uniformMatrix4fv(g_model_ref, false, g_model_matrix_3.elements)
    gl.uniformMatrix4fv(g_world_ref, false, g_world_matrix_3.elements)
    var inv = new Matrix4(g_world_matrix_3)
        .concat(g_model_matrix_3)
        .invert().transpose()
    gl.uniformMatrix4fv(g_inverse_transpose_ref, false, inv.elements)

    gl.uniform3fv(g_ambient_light, new Float32Array([0, 0, 0]))
    gl.uniform3fv(g_diffuse_color, new Float32Array([1, 1, 1]))
    gl.uniform1f(g_spec_power, 64.0)
    gl.uniform3fv(g_spec_color, new Float32Array([1, 1, 1]))
    gl.drawArrays(gl.TRIANGLES, (g_vertex_count + g_grid_vertex_count + cyl_mesh.length/3 + sp_mesh.length/3), arm_mesh.length/3)
    //arm2
    gl.uniformMatrix4fv(g_model_ref, false, g_model_matrix_8.elements)
    gl.uniformMatrix4fv(g_world_ref, false, g_world_matrix_8.elements)
    var inv = new Matrix4(g_world_matrix_8)
        .concat(g_model_matrix_8)
        .invert().transpose()
    gl.uniformMatrix4fv(g_inverse_transpose_ref, false, inv.elements)

    gl.uniform3fv(g_ambient_light, new Float32Array([0, 0, 0]))
    gl.uniform3fv(g_diffuse_color, new Float32Array([1, 1, 1]))
    gl.uniform1f(g_spec_power, 64.0)
    gl.uniform3fv(g_spec_color, new Float32Array([1, 1, 1]))
    gl.drawArrays(gl.TRIANGLES, (g_vertex_count + g_grid_vertex_count + cyl_mesh.length/3 + sp_mesh.length/3), arm_mesh.length/3)

    //a2
    //arm1
    
    gl.uniformMatrix4fv(g_model_ref, false, g_model_matrix_6.elements)
    gl.uniformMatrix4fv(g_world_ref, false, g_world_matrix_6.elements)
    var inv = new Matrix4(g_world_matrix_6)
        .concat(g_model_matrix_6)
        .invert().transpose()
    gl.uniformMatrix4fv(g_inverse_transpose_ref, false, inv.elements)

    gl.uniform3fv(g_ambient_light, new Float32Array([0, 0, 0]))
    gl.uniform3fv(g_diffuse_color, new Float32Array([1, 1, 1]))
    gl.uniform1f(g_spec_power, 64.0)
    gl.uniform3fv(g_spec_color, new Float32Array([1, 1, 1]))
    gl.drawArrays(gl.TRIANGLES, (g_vertex_count + g_grid_vertex_count + cyl_mesh.length/3 + sp_mesh.length/3), arm_mesh.length/3)
    //arm2
    gl.uniformMatrix4fv(g_model_ref, false, g_model_matrix_7.elements)
    gl.uniformMatrix4fv(g_world_ref, false, g_world_matrix_7.elements)
    var inv = new Matrix4(g_world_matrix_7)
        .concat(g_model_matrix_7)
        .invert().transpose()
    gl.uniformMatrix4fv(g_inverse_transpose_ref, false, inv.elements)

    gl.uniform3fv(g_ambient_light, new Float32Array([0, 0, 0]))
    gl.uniform3fv(g_diffuse_color, new Float32Array([1, 1, 1]))
    gl.uniform1f(g_spec_power, 64.0)
    gl.uniform3fv(g_spec_color, new Float32Array([1, 1, 1]))
    gl.drawArrays(gl.TRIANGLES, (g_vertex_count + g_grid_vertex_count + cyl_mesh.length/3 + sp_mesh.length/3), arm_mesh.length/3)


    
}



// Helper to setup vec3 attributes
function setup_vec3(name, stride, offset) {
    // Get the attribute
    var attributeID = gl.getAttribLocation(gl.program, `${name}`)
    if (attributeID < 0) {
        console.log(`Failed to get the storage location of ${name}`)
        return -1;
    }

    // Set how the GPU fills the a_Position variable with data from the GPU 
    gl.vertexAttribPointer(attributeID, stride, gl.FLOAT, false, 0, offset)
    gl.enableVertexAttribArray(attributeID)

    return 0
}

// Event to change which rotation is selected
function updateRotation() {
    var rotateX = document.getElementById('rotateX')
    var rotateY = document.getElementById('rotateY')
    var rotateZ = document.getElementById('rotateZ')

    g_rotation_axis[0] = Number(rotateX.checked)
    g_rotation_axis[1] = Number(rotateY.checked)
    g_rotation_axis[2] = Number(rotateZ.checked)
}

function updateLightX(amount) {
    label = document.getElementById('lightX')
    label.textContent = `Light X: ${Number(amount).toFixed(2)}`
    g_light_x = Number(amount)
}

function updateLightY(amount) {
    label = document.getElementById('lightY')
    label.textContent = `Light Y: ${Number(amount).toFixed(2)}`
    g_light_y = Number(amount)
}

function updateLightZ(amount) {
    label = document.getElementById('lightZ')
    label.textContent = `Light Z: ${Number(amount).toFixed(2)}`
    g_light_z = Number(amount)
}

function updateCameraX(amount) {
    label = document.getElementById('cameraX')
    label.textContent = `Camera X: ${Number(amount).toFixed(2)}`
    g_camera_x = Number(amount)
}

function updateCameraY(amount) {
    label = document.getElementById('cameraY')
    label.textContent = `Camera Y: ${Number(amount).toFixed(2)}`
    g_camera_y = Number(amount)
}

function updateCameraZ(amount) {
    label = document.getElementById('cameraZ')
    label.textContent = `Camera Z: ${Number(amount).toFixed(2)}`
    g_camera_z = Number(amount)
}

function updateNear(amount) {
    label = document.getElementById('near')
    label.textContent = `Near: ${Number(amount).toFixed(2)}`
    g_near = Number(amount)
}

function updateFar(amount) {
    label = document.getElementById('far')
    label.textContent = `Far: ${Number(amount).toFixed(2)}`
    g_far = Number(amount)
}

function updateFOVY(amount) {
    label = document.getElementById('fovy')
    label.textContent = `FOVY: ${Number(amount).toFixed(2)}`
    g_fovy = Number(amount)
}

function updateAspect(amount) {
    label = document.getElementById('aspect')
    label.textContent = `Aspect: ${Number(amount).toFixed(2)}`
    g_aspect = Number(amount)
}

// How far in the X and Z directions the grid should extend
// Recall that the camera "rests" on the X/Z plane, since Z is "out" from the camera
const GRID_X_RANGE = 100
const GRID_Z_RANGE = 100

// Helper to build a grid mesh and colors
// Returns these results as a pair of arrays
// Each vertex in the mesh is constructed with an associated grid_color
function build_grid_attributes(grid_row_spacing, grid_column_spacing) {
    if (grid_row_spacing < 1 || grid_column_spacing < 1) {
        console.error("Cannot have grid spacing less than 1")
        return [[], []]
    }
    var mesh = []

    // Construct the rows
    for (var x = -GRID_X_RANGE; x < GRID_X_RANGE; x += grid_row_spacing) {
        // two vertices for each line
        // one at -Z and one at +Z
        mesh.push(x, 0, -GRID_Z_RANGE)
        mesh.push(x, 0, GRID_Z_RANGE)
    }

    // Construct the columns extending "outward" from the camera
    for (var z = -GRID_Z_RANGE; z < GRID_Z_RANGE; z += grid_row_spacing) {
        // two vertices for each line
        // one at -Z and one at +Z
        mesh.push(-GRID_X_RANGE, 0, z)
        mesh.push(GRID_X_RANGE, 0, z)
    }

    g_grid_vertex_count = mesh.length / 3

    var mesh_normals = []
    // Add in dummy normals for padding
    for (var i = 0; i < mesh.length / 3; i++) {
        mesh_normals.push(0, 1, 0)
    }

    return [mesh, mesh_normals]
}

function parse_obj(meshstring) {
    var lines = meshstring.split('\n')
    var mesh = []
    var verts = [[0,0,0]]
    var normals_ind = []
    var normals = []
    var tex_coords_ind = []
    var textures = []
    for (var i = 0; i < lines.length; i++){
        if (lines[i][0] === 'v' && lines[i][1] === ' '){
            s = lines[i].split(/\s+/)
            verts.push([parseFloat(s[1]),parseFloat(s[2]),parseFloat(s[3])])
        } else if (lines[i][0] === 'v' && lines[i][1] === 'n'){
            s = lines[i].split(/\s+/)
            normals_ind.push([parseFloat(s[1]),parseFloat(s[2]),parseFloat(s[3])])
        } else if (lines[i][0] === 'v' && lines[i][1] === 't'){
            s = lines[i].split(/\s+/)
            tex_coords_ind.push([parseFloat(s[1]),parseFloat(s[2])])
        }
        
    }
    vertex_count = 0
    
    for (var i = 0; i < lines.length; i++){
        if(lines[i][0] === 'f'){
            s = lines[i].split(/\s+/)
            if (s.length === 5){
                tri1 = [s[1], s[2], s[3]]
                tri2 = [s[1], s[3], s[4]]
                //add tri1 face
                for (var k = 0; k < 3; k++){
                    cur = tri1[k]
                    facesplit = cur.split('/')
                    ind = parseInt(facesplit[0])
                    n_ind = parseInt(facesplit[2])-1
                    tex_ind = parseInt(facesplit[1])-1
                    v = verts[ind]
                    if (v != undefined){
                        mesh.push(v[0])
                        mesh.push(v[1])
                        mesh.push(v[2])
                        normals.push(normals_ind[n_ind][0],normals_ind[n_ind][1],normals_ind[n_ind][2])
                        textures.push(tex_coords_ind[tex_ind][0],tex_coords_ind[tex_ind][1]) 
                    }
                
                }
                for (var k = 0; k < 3; k++){
                    cur = tri2[k]
                    facesplit = cur.split('/')
                    ind = parseInt(facesplit[0])
                    n_ind = parseInt(facesplit[2])-1
                    tex_ind = parseInt(facesplit[1])-1
                    v = verts[ind]
                    if (v != undefined){
                        mesh.push(v[0])
                        mesh.push(v[1])
                        mesh.push(v[2])
                        normals.push(normals_ind[n_ind][0],normals_ind[n_ind][1],normals_ind[n_ind][2])
                        textures.push(tex_coords_ind[tex_ind][0],tex_coords_ind[tex_ind][1])
                    }
                    
                }
                vertex_count = vertex_count + 6
            } else if (s.length === 4) {
                tri1 = [s[1], s[2], s[3]]
                for (var k = 0; k < 3; k++){
                    cur = tri1[k]
                    facesplit = cur.split('/')
                    ind = parseInt(facesplit[0])
                    v = verts[ind]
                    n_ind = parseInt(facesplit[2])-1
                    tex_ind = parseInt(facesplit[1])-1
                    if (v != undefined){
                        mesh.push(v[0])
                        mesh.push(v[1])
                        mesh.push(v[2])
                        normals.push(normals_ind[n_ind][0],normals_ind[n_ind][1],normals_ind[n_ind][2])
                        textures.push(tex_coords_ind[tex_ind][0],tex_coords_ind[tex_ind][1])
                        vertex_count = vertex_count + 3
                            
                    }
                
                }
            }  
            
        }
    }

    console.log(normals)
    console.log(mesh)
    console.log(vertex_count)

    return [verts, mesh, vertex_count, normals, textures]

}

